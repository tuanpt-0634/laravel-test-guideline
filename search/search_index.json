{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gi\u1edbi thi\u1ec7u \u00b6 T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i... Quan \u0111i\u1ec3m test \u00b6 Ch\u1ecdn c\u00e1ch \u0111\u01a1n gi\u1ea3n, kh\u00f4ng qu\u00e1 quan tr\u1ecdng ph\u1ea3i l\u00e0 unit test thu\u1ea7n Follow theo t\u00e0i li\u1ec7u c\u1ee7a framework \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm ki\u1ebfm, t\u00edch h\u1ee3p Test code c\u1ee7a project, kh\u00f4ng test code c\u1ee7a framework, th\u01b0 vi\u1ec7n V\u00ed d\u1ee5 v\u1edbi project Laravel: Controller: n\u1ebfu vi\u1ebft theo ki\u1ec3u unit test thu\u1ea7n th\u00ec \u0111\u00f2i h\u1ecfi ng\u01b0\u1eddi vi\u1ebft ph\u1ea3i c\u00f3 nhi\u1ec1u ki\u1ebfn th\u1ee9c v\u1ec1 framework, theo nh\u01b0 kinh nghi\u1ec7m th\u00ec l\u1ea7n \u0111\u1ea7u vi\u1ebft, t\u00f4i ph\u1ea3i dd xem response n\u00f3 l\u00e0 g\u00ec, sau \u0111\u00f3 l\u00e0 \u0111\u1ecdc code framework xem l\u00e0m sao \u0111\u1ec3 l\u1ea5y ra value t\u1eeb response \u0111\u1ec3 assert... m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 gi\u00fap ng\u01b0\u1eddi vi\u1ebft hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 framework, nh\u01b0ng n\u00f3 ph\u1ee9c t\u1ea1p, t\u1ed1n th\u1eddi gian. V\u1edbi c\u1ea3 controller th\u00ec ch\u1ee7 y\u1ebfu ch\u1ec9 \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng request, kh\u00f4ng c\u00f3 nhi\u1ec1u logic th\u00ec vi\u1ec7c vi\u1ebft unit test thu\u1ea7n c\u00f3 mang l\u1ea1i l\u1ee3i \u00edch? So v\u1edbi vi\u1ec7c d\u00f9ng http tests , ch\u00fang ta c\u00f3 t\u00e0i li\u1ec7u , c\u00f3 c\u00e1c helper method \u0111\u1ec3 vi\u1ebft test nhanh h\u01a1n, v\u1ec1 t\u1ed1c \u0111\u1ed9 th\u00ec n\u00f3 c\u0169ng kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi unit test thu\u1ea7n v\u00ec g\u1ecdi l\u00e0 HTTP test nh\u01b0ng th\u1ef1c ch\u1ea5t ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng HTTP Kernel \u0111\u1ec3 handle request internal, kh\u00f4ng li\u00ean quan \u0111\u1ebfn network. Form request: \u0111a ph\u1ea7n th\u00ec class n\u00e0y ch\u1ec9 th\u1ef1c hi\u1ec7n khai b\u00e1o rules, kh\u00f4ng th\u1ef1c hi\u1ec7n logic g\u00ec \u0111\u1eb7c bi\u1ec7t n\u00ean kh\u00f4ng c\u1ea7n test ri\u00eang method rules() m\u00e0 test g\u1ed9p chung v\u1edbi controller Model: kh\u00f4ng c\u1ea7n test config c\u00e1c field nh\u01b0 fillable, casts, hidden, visible qua unit tests v\u00ec ph\u1ea7n n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel test, vi\u1ec7c c\u1ea7n test \u1edf \u0111\u00e2y l\u00e0 n\u00f3 c\u00f3 t\u00edch h\u1ee3p v\u1edbi database \u0111\u00fang kh\u00f4ng, v\u00ed d\u1ee5 t\u00ean tr\u01b0\u1eddng c\u00f3 \u0111\u00fang v\u1edbi db, value c\u00f3 v\u01b0\u1ee3t qu\u00e1 limit,... Developer Test \u00b6 Developer tr\u01b0\u1edbc ti\u00ean ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i test Unit test \u00b6 Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u1ede trong PHP Project, vi\u1ebft Unit Test l\u00e0 vi\u1ec7c vi\u1ebft test cho t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Unit test kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network, g\u1ecdi api b\u00ean ngo\u00e0i (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test \u00b6 Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit Ch\u1eb3ng h\u1ea1n Unit test, test t\u1eebng method c\u1ee7a Service v\u00e0 Controller s\u1eed d\u1ee5ng service => Integration s\u1ebd test vi\u1ec7c s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p service v\u00e0 controller => Test route C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) V\u1edbi vi\u1ec7c focus v\u00e0o hai level test n\u00e0y, theo ch\u00fang t\u00f4i l\u00e0 t\u1ed1i \u01b0u v\u1ec1 c\u1ea3 th\u1eddi gian vi\u1ebft v\u00e0 th\u1eddi gian ch\u1ea1y test, c\u0169ng nh\u01b0 \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o \u0111\u00f3 t\u00ednh hi\u1ec7u qu\u1ea3 c\u1ee7a vi\u1ec7c test.","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#gioi-thieu","text":"T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i...","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#quan-iem-test","text":"Ch\u1ecdn c\u00e1ch \u0111\u01a1n gi\u1ea3n, kh\u00f4ng qu\u00e1 quan tr\u1ecdng ph\u1ea3i l\u00e0 unit test thu\u1ea7n Follow theo t\u00e0i li\u1ec7u c\u1ee7a framework \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm ki\u1ebfm, t\u00edch h\u1ee3p Test code c\u1ee7a project, kh\u00f4ng test code c\u1ee7a framework, th\u01b0 vi\u1ec7n V\u00ed d\u1ee5 v\u1edbi project Laravel: Controller: n\u1ebfu vi\u1ebft theo ki\u1ec3u unit test thu\u1ea7n th\u00ec \u0111\u00f2i h\u1ecfi ng\u01b0\u1eddi vi\u1ebft ph\u1ea3i c\u00f3 nhi\u1ec1u ki\u1ebfn th\u1ee9c v\u1ec1 framework, theo nh\u01b0 kinh nghi\u1ec7m th\u00ec l\u1ea7n \u0111\u1ea7u vi\u1ebft, t\u00f4i ph\u1ea3i dd xem response n\u00f3 l\u00e0 g\u00ec, sau \u0111\u00f3 l\u00e0 \u0111\u1ecdc code framework xem l\u00e0m sao \u0111\u1ec3 l\u1ea5y ra value t\u1eeb response \u0111\u1ec3 assert... m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 gi\u00fap ng\u01b0\u1eddi vi\u1ebft hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 framework, nh\u01b0ng n\u00f3 ph\u1ee9c t\u1ea1p, t\u1ed1n th\u1eddi gian. V\u1edbi c\u1ea3 controller th\u00ec ch\u1ee7 y\u1ebfu ch\u1ec9 \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng request, kh\u00f4ng c\u00f3 nhi\u1ec1u logic th\u00ec vi\u1ec7c vi\u1ebft unit test thu\u1ea7n c\u00f3 mang l\u1ea1i l\u1ee3i \u00edch? So v\u1edbi vi\u1ec7c d\u00f9ng http tests , ch\u00fang ta c\u00f3 t\u00e0i li\u1ec7u , c\u00f3 c\u00e1c helper method \u0111\u1ec3 vi\u1ebft test nhanh h\u01a1n, v\u1ec1 t\u1ed1c \u0111\u1ed9 th\u00ec n\u00f3 c\u0169ng kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi unit test thu\u1ea7n v\u00ec g\u1ecdi l\u00e0 HTTP test nh\u01b0ng th\u1ef1c ch\u1ea5t ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng HTTP Kernel \u0111\u1ec3 handle request internal, kh\u00f4ng li\u00ean quan \u0111\u1ebfn network. Form request: \u0111a ph\u1ea7n th\u00ec class n\u00e0y ch\u1ec9 th\u1ef1c hi\u1ec7n khai b\u00e1o rules, kh\u00f4ng th\u1ef1c hi\u1ec7n logic g\u00ec \u0111\u1eb7c bi\u1ec7t n\u00ean kh\u00f4ng c\u1ea7n test ri\u00eang method rules() m\u00e0 test g\u1ed9p chung v\u1edbi controller Model: kh\u00f4ng c\u1ea7n test config c\u00e1c field nh\u01b0 fillable, casts, hidden, visible qua unit tests v\u00ec ph\u1ea7n n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel test, vi\u1ec7c c\u1ea7n test \u1edf \u0111\u00e2y l\u00e0 n\u00f3 c\u00f3 t\u00edch h\u1ee3p v\u1edbi database \u0111\u00fang kh\u00f4ng, v\u00ed d\u1ee5 t\u00ean tr\u01b0\u1eddng c\u00f3 \u0111\u00fang v\u1edbi db, value c\u00f3 v\u01b0\u1ee3t qu\u00e1 limit,...","title":"Quan \u0111i\u1ec3m test"},{"location":"#developer-test","text":"Developer tr\u01b0\u1edbc ti\u00ean ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i test","title":"Developer Test"},{"location":"#unit-test","text":"Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u1ede trong PHP Project, vi\u1ebft Unit Test l\u00e0 vi\u1ec7c vi\u1ebft test cho t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Unit test kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network, g\u1ecdi api b\u00ean ngo\u00e0i (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test)","title":"Unit test"},{"location":"#integration-test","text":"Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit Ch\u1eb3ng h\u1ea1n Unit test, test t\u1eebng method c\u1ee7a Service v\u00e0 Controller s\u1eed d\u1ee5ng service => Integration s\u1ebd test vi\u1ec7c s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p service v\u00e0 controller => Test route C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) V\u1edbi vi\u1ec7c focus v\u00e0o hai level test n\u00e0y, theo ch\u00fang t\u00f4i l\u00e0 t\u1ed1i \u01b0u v\u1ec1 c\u1ea3 th\u1eddi gian vi\u1ebft v\u00e0 th\u1eddi gian ch\u1ea1y test, c\u0169ng nh\u01b0 \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o \u0111\u00f3 t\u00ednh hi\u1ec7u qu\u1ea3 c\u1ee7a vi\u1ec7c test.","title":"Integration test"},{"location":"01-why/","text":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec? \u00b6 C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"01-why/#viet-test-e-lam-gi","text":"C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"02-testcase/","text":"C\u01a1 b\u1ea3n v\u1ec1 test case \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ... Vi\u1ebft test case \u00b6 Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau: Normal cases \u00b6 public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases \u00b6 public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases \u00b6 public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#co-ban-ve-test-case","text":"","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#khai-niem","text":"Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ...","title":"Kh\u00e1i ni\u1ec7m"},{"location":"02-testcase/#viet-test-case","text":"Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau:","title":"Vi\u1ebft test case"},{"location":"02-testcase/#normal-cases","text":"public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); }","title":"Normal cases"},{"location":"02-testcase/#boundary-cases","text":"public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Boundary cases"},{"location":"02-testcase/#abnormal-cases","text":"public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Abnormal cases"},{"location":"03-phpunit/","text":"PHPUnit \u00b6 C\u00e0i \u0111\u1eb7t \u00b6 C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit C\u1ea5u h\u00ecnh \u00b6 File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret Ch\u1ea1y test \u00b6 Ch\u1ea1y to\u00e0n b\u1ed9 test case \u00b6 ./vendor/bin/phpunit Ch\u1ea1y t\u1eebng test suite \u00b6 ./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration Ch\u1ea1y t\u1eebng file \u00b6 ./vendor/bin/phpunit tests/Unit/ProductServiceTest.php Filter test case \u00b6 ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod Format output \u00b6 ./vendor/bin/phpunit --testdox Example test \u00b6 <? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert Setup and Teardown \u00b6 PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass() Assertion \u00b6 ** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); } Best practices \u00b6 S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); Data provider \u00b6 S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"PHPUnit"},{"location":"03-phpunit/#phpunit","text":"","title":"PHPUnit"},{"location":"03-phpunit/#cai-at","text":"C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit","title":"C\u00e0i \u0111\u1eb7t"},{"location":"03-phpunit/#cau-hinh","text":"File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret","title":"C\u1ea5u h\u00ecnh"},{"location":"03-phpunit/#chay-test","text":"","title":"Ch\u1ea1y test"},{"location":"03-phpunit/#chay-toan-bo-test-case","text":"./vendor/bin/phpunit","title":"Ch\u1ea1y to\u00e0n b\u1ed9 test case"},{"location":"03-phpunit/#chay-tung-test-suite","text":"./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration","title":"Ch\u1ea1y t\u1eebng test suite"},{"location":"03-phpunit/#chay-tung-file","text":"./vendor/bin/phpunit tests/Unit/ProductServiceTest.php","title":"Ch\u1ea1y t\u1eebng file"},{"location":"03-phpunit/#filter-test-case","text":"./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod","title":"Filter test case"},{"location":"03-phpunit/#format-output","text":"./vendor/bin/phpunit --testdox","title":"Format output"},{"location":"03-phpunit/#example-test","text":"<? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert","title":"Example test"},{"location":"03-phpunit/#setup-and-teardown","text":"PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass()","title":"Setup and Teardown"},{"location":"03-phpunit/#assertion","text":"** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); }","title":"Assertion"},{"location":"03-phpunit/#best-practices","text":"S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"Best practices"},{"location":"03-phpunit/#data-provider","text":"S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"Data provider"},{"location":"04-code-coverage/","text":"Code Coverage \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test. T\u1ea1o report v\u1edbi PHPUnit \u00b6 Coverage driver \u00b6 \u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text Coverage format \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI. 100% code coverage \u00b6 100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"Code Coverage"},{"location":"04-code-coverage/#code-coverage","text":"","title":"Code Coverage"},{"location":"04-code-coverage/#khai-niem","text":"Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test.","title":"Kh\u00e1i ni\u1ec7m"},{"location":"04-code-coverage/#tao-report-voi-phpunit","text":"","title":"T\u1ea1o report v\u1edbi PHPUnit"},{"location":"04-code-coverage/#coverage-driver","text":"\u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text","title":"Coverage driver"},{"location":"04-code-coverage/#coverage-format","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI.","title":"Coverage format"},{"location":"04-code-coverage/#100-code-coverage","text":"100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"100% code coverage"},{"location":"05-test-doubles-and-di/","text":"Test Doubles v\u00e0 DI \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler Dummies \u00b6 Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter. Fake \u00b6 Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database) Stubs \u00b6 Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test. Mocks \u00b6 Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c. Test c\u00f4 l\u1eadp \u00b6 Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test Dependency Injection \u00b6 Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); } Mocks vs Stubs \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh Stubs \u00b6 Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 )); Mocks \u00b6 Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); } Tham kh\u1ea3o \u00b6 (*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#test-doubles-va-di","text":"","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#khai-niem","text":"M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler","title":"Kh\u00e1i ni\u1ec7m"},{"location":"05-test-doubles-and-di/#dummies","text":"Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter.","title":"Dummies"},{"location":"05-test-doubles-and-di/#fake","text":"Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database)","title":"Fake"},{"location":"05-test-doubles-and-di/#stubs","text":"Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test.","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks","text":"Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c.","title":"Mocks"},{"location":"05-test-doubles-and-di/#test-co-lap","text":"Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test","title":"Test c\u00f4 l\u1eadp"},{"location":"05-test-doubles-and-di/#dependency-injection","text":"Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); }","title":"Dependency Injection"},{"location":"05-test-doubles-and-di/#mocks-vs-stubs","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh","title":"Mocks vs Stubs"},{"location":"05-test-doubles-and-di/#stubs_1","text":"Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 ));","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks_1","text":"Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); }","title":"Mocks"},{"location":"05-test-doubles-and-di/#tham-khao","text":"(*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Tham kh\u1ea3o"},{"location":"06-mutation-testing/","text":"Mutation Testing \u00b6 https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"06-mutation-testing/#mutation-testing","text":"https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"07-laravel/","text":"Laravel \u00b6 Conventions \u00b6 C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Integration N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: public function test_it_throws_an_exception_when_email_is_too_long () { } Model \u00b6 Test accessors and mutators \u00b6 VD: class User extends Model { public function setPasswordAttribute ( $password ) { $this -> attributes [ 'password' ] = Hash :: make ( $password ); } } class UserTest extends TestCase { public function testHashesPasswordWhenSet () { Hash :: shouldReceive ( 'make' ) -> once () -> andReturn ( 'hashed' ); $author = new User ; $author -> password = 'foo' ; $this -> assertEquals ( 'hashed' , $author -> password ); } } \u1ede \u0111\u00e2y method Hash::make() \u0111\u01b0\u1ee3c mock, c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 sau: T\u00f4i mong mu\u1ed1n make() method c\u1ee7a class Hash \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 khi \u0111\u01b0\u1ee3c g\u1ecdi n\u00f3 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb stub l\u00e0 hashed nh\u1eb1m m\u1ee5c \u0111\u00edch \u0111\u1ec3 bi\u1ebft ch\u00ednh x\u00e1c k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 v\u00e0 assert v\u1edbi k\u1ebft qu\u1ea3 th\u1ef1c t\u1ebf c\u1ee7a method setPasswordAttribute . Test scopes \u00b6 class User extends Model { public function scopeOldest ( $query ) { return $query -> orderBy ( 'age' , 'desc' ); } } Mr. JeffreyWay c\u00f3 \u0111\u01b0a ra m\u1ed9t th\u1ea3o lu\u1eadn , v\u00e0 \u0111\u01b0a ra m\u1ed9t v\u00e0i kh\u1ea3 n\u0103ng: Kh\u00f4ng c\u1ea7n test method n\u00e0y? Th\u1ef1c hi\u1ec7n integration test v\u1edbi test database, b\u1eb1ng c\u00e1ch insert m\u1ed9t v\u00e0i record v\u00e0o db, g\u1ecdi method v\u00e0 assert method tr\u1ea3 v\u1ec1 correct row. Partial mock class User v\u00e0 verify method orderBy \u0111\u01b0\u1ee3c g\u1ecdi. H\u1ea7u h\u1ebft c\u00e1c \u00fd \u0111\u1ec1u \u0111\u1ed3ng t\u00ecnh v\u1edbi c\u00e1ch th\u1ee9 2, v\u00ec: Ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u00fang ta \u0111ang s\u1eed d\u1ee5ng c\u00e1c unit c\u1ee7a Eloquent/QueryBuilder m\u00e0 kh\u00f4ng c\u00f3 logic g\u00ec ph\u1ee9c t\u1ea1p Eloquent v\u00e0 QueryBuilder \u0111\u1ec1u \u0111\u00e3 \u0111\u01b0\u1ee3c test \u1edf m\u1ee9c \u0111\u1ed9 unit test \u0111\u1ec3 ki\u1ec3m ch\u1ee9ng t\u00ednh \u0111\u00fang \u0111\u1eafn khi ch\u1ea1y \u0111\u1ed9c l\u1eadp N\u1ebfu th\u1ef1c mock, ch\u00fang ta s\u1ebd expect method orderBy \u0111\u01b0\u1ee3c g\u1ecdi v\u1edbi 2 tham s\u1ed1 age v\u00e0 desc nh\u01b0ng l\u00e0m sao \u0111\u1ec3 bi\u1ebft age c\u00f3 \u0111\u00fang l\u00e0 1 tr\u01b0\u1eddng trong database? V\u00ec th\u1ebf, integration test l\u00e0 c\u00e1ch h\u1ee3p l\u00fd nh\u1ea5t \u1edf \u0111\u00e2y: class UserTest extends TestCase { public function testGetsOldestUser () { // Arrange: Insert two test rows into a test DB Factory :: create ( 'User' , [ 'age' => 20 ]); Factory :: create ( 'User' , [ 'age' => 30 ]); // Act: call the method $oldest = User :: oldest () -> first (); // Assert $this -> assertEquals ( 30 , $oldest -> age ); } } Test relationships \u00b6 Th\u1ef1c hi\u1ec7n assert k\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c relation thu\u1ed9c class t\u01b0\u01a1ng \u1ee9ng: HasMany BelongsTo BelongsToMany ... Test custom methods \u00b6 VD1: class User extends Model { public function fullname () { return $this -> firstname . ' - ' . $this -> lastname ; } } class UserTest extends TestCase { public function testGetFullName () { $user = new User ; $user -> firstname = 'Edogawa' ; $user -> lastname = 'Conan' ; $this -> assertEquals ( 'Edogawa Conan' , $user -> fullname ()); } } Integration test cho vi\u1ec7c thi\u1ebft l\u1eadp fillable , hidden , casts \u00b6 Unit test \u0111\u00e3 \u0111\u01b0\u1ee3c framework th\u1ef1c hi\u1ec7n T\u01b0\u01a1ng t\u1ef1 khi test scope, ch\u00fang ta th\u1ef1c hi\u1ec7n integration test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o c\u00e1c field \u0111\u01b0\u1ee3c mapping ch\u00ednh x\u00e1c v\u1edbi DB schema Test Form request \u00b6 Kh\u00f4ng th\u1ef1c hi\u1ec7n unit test n\u1ebfu form request ch\u1ec9 khai b\u00e1o rules() v\u00e0 kh\u00f4ng c\u00f3 logic g\u00ec \u0111\u1eb7c bi\u1ec7t? V\u00ec vi\u1ec7c test c\u00e1c rule validation \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel th\u1ef1c hi\u1ec7n trong core framework, ch\u00fang ta ch\u1ec9 khai b\u00e1o s\u1eed d\u1ee5ng n\u00f3! M\u1ed9t c\u00e1ch kh\u00e1c \u0111\u1ec3 th\u1ef1c hi\u1ec7n unit test \u0111\u00f3 l\u00e0 t\u1ef1 validate FormRequest th\u00f4ng qua Validator::make() , tuy nhi\u00ean n\u00ean nh\u1edb l\u00e0 FormRequest c\u00f3 th\u1ec3 override l\u1ea1i method getValidatorInstance() \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 logic kh\u00e1c. VD chi ti\u1ebft t\u1ea1i \u0111\u00e2y: https://gist.github.com/tuanpht/37394e0df10d48d08d0d406c9a7dd477 Thay v\u00e0o \u0111\u00f3 ch\u00fang ta th\u1ef1c hi\u1ec7n integration test khi test controller, v\u00ec m\u1ee5c \u0111\u00edch c\u1ee7a class form request th\u01b0\u1eddng ch\u1ec9 \u0111\u1ec3 t\u00e1ch ph\u1ea7n khai b\u00e1o rule ra kh\u1ecfi controller, n\u00ean c\u1ea7n test t\u00edch h\u1ee3p \u0111\u1ec3 n\u00f3 c\u00f3 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 mong mu\u1ed1n khi k\u1ebft h\u1ee3p v\u1edbi controller hay kh\u00f4ng, response khi validate failed l\u00e0 g\u00ec... Test Controller \u00b6 Nh\u1eafc l\u1ea1i v\u1ec1 nhi\u1ec7m v\u1ee5 c\u1ee7a Controller: \u0110i\u1ec1u h\u01b0\u1edbng HTTP request G\u1ecdi \u0111\u1ebfn domain object \u0111\u1ec3 th\u1ef1c hi\u1ec7n logic v\u00e0 l\u1ea5y k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 (Fat Model - Skinny Controller, kh\u00f4ng s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp Eloquent Model m\u00e0 s\u1ebd c\u00f3 1 t\u1ea7ng trung gian (repository, service)) Ngo\u00e0i ra c\u00e1c action nh\u01b0 th\u00eam/s\u1eeda th\u01b0\u1eddng s\u1eed d\u1ee5ng th\u00eam FormRequest C\u1ea7n test nh\u1eefng g\u00ec: Request c\u00f3 th\u00e0nh c\u00f4ng kh\u00f4ng? User c\u00f3 \u0111\u01b0\u1ee3c redirect \u0111\u1ebfn \u0111\u00fang page kh\u00f4ng? Message c\u00f3 hi\u1ec3n th\u1ecb \u0111\u00fang cho user kh\u00f4ng? C\u00f3 tr\u1ea3 v\u1ec1 view \u0111\u00fang kh\u00f4ng v\u00e0 c\u00e1c bi\u1ebfn c\u00f3 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 cho view kh\u00f4ng? N\u1ebfu l\u00e0 api th\u00ec format tr\u1ea3 v\u1ec1 c\u00f3 \u0111\u00fang kh\u00f4ng? Th\u1ef1c hi\u1ec7n test: Do ta \u0111\u00e3 t\u00e1ch logic DB s\u1eed d\u1ee5ng repository (service) n\u00ean integration test controller c\u00f3 th\u1ec3 mock repository v\u00e0 th\u1ef1c hi\u1ec7n test repository integrate v\u1edbi DB ri\u00eang bi\u1ec7t Th\u1ef1c hi\u1ec7n test t\u00edch h\u1ee3p v\u1edbi FormRequest, t\u1ea1o ra c\u00e1c input m\u1eabu v\u00e0 test c\u00e1c tr\u01b0\u1eddng h\u1ee3p input \u0111\u00fang, input sai, assert response t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u1eebng tr\u01b0\u1eddng h\u1ee3p C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng SQLite in-memory database khi th\u1ef1c hi\u1ec7n integration test thay v\u00ec MySQL \u0111\u1ec3 c\u1ea3i thi\u1ec7n hi\u1ec7u n\u0103ng v\u00e0 t\u0103ng t\u1ed1c qu\u00e1 tr\u00ecnh test. Tuy nhi\u00ean c\u00f3 m\u1ed9t ch\u00fa \u00fd l\u00e0 database migration hay database seed ph\u1ea3i \u0111\u01b0\u1ee3c ch\u1ea1y trong qu\u00e1 tr\u00ecnh test ch\u1ee9 kh\u00f4ng th\u1ec3 ch\u1ea1y tr\u01b0\u1edbc khi ch\u1ea1y test. Khi \u0111\u00f3 ch\u00fang ta s\u1eed d\u1ee5ng trait RefreshDatabase \u0111\u1ec3 v\u1eeba refresh database sau m\u1ed7i test case. C\u00f2n khi s\u1eed d\u1ee5ng database test l\u00e0 MySQL th\u00ec th\u1ef1c hi\u1ec7n migration tr\u01b0\u1edbc khi v\u00e0 s\u1eed d\u1ee5ng DatabaseTransactions thay v\u00ec ph\u1ea3i ch\u1ea1y l\u1ea1i migration trong m\u1ed7i test case. C\u00f3 th\u1ec3 t\u1ea1o 1 trait chung cho test DB: trait SetupDatabaseTrait { use RefreshDatabase ; // For SQLite in memory // use DatabaseTransactions; // For other DB connections } class NewsApiTest extends TestCase { use SetupDatabaseTrait ; } Khi mu\u1ed1n chuy\u1ec3n \u0111\u1ed5i database test gi\u1eefa MySQL v\u00e0 SQLite th\u00ec ch\u1ec9 c\u1ea7n s\u1eeda l\u1ea1i trong trait SetupDatabaseTrait .","title":"Laravel"},{"location":"07-laravel/#laravel","text":"","title":"Laravel"},{"location":"07-laravel/#conventions","text":"C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Integration N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: public function test_it_throws_an_exception_when_email_is_too_long () { }","title":"Conventions"},{"location":"07-laravel/#model","text":"","title":"Model"},{"location":"07-laravel/#test-accessors-and-mutators","text":"VD: class User extends Model { public function setPasswordAttribute ( $password ) { $this -> attributes [ 'password' ] = Hash :: make ( $password ); } } class UserTest extends TestCase { public function testHashesPasswordWhenSet () { Hash :: shouldReceive ( 'make' ) -> once () -> andReturn ( 'hashed' ); $author = new User ; $author -> password = 'foo' ; $this -> assertEquals ( 'hashed' , $author -> password ); } } \u1ede \u0111\u00e2y method Hash::make() \u0111\u01b0\u1ee3c mock, c\u00f3 th\u1ec3 hi\u1ec3u nh\u01b0 sau: T\u00f4i mong mu\u1ed1n make() method c\u1ee7a class Hash \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 khi \u0111\u01b0\u1ee3c g\u1ecdi n\u00f3 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb stub l\u00e0 hashed nh\u1eb1m m\u1ee5c \u0111\u00edch \u0111\u1ec3 bi\u1ebft ch\u00ednh x\u00e1c k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 v\u00e0 assert v\u1edbi k\u1ebft qu\u1ea3 th\u1ef1c t\u1ebf c\u1ee7a method setPasswordAttribute .","title":"Test accessors and mutators"},{"location":"07-laravel/#test-scopes","text":"class User extends Model { public function scopeOldest ( $query ) { return $query -> orderBy ( 'age' , 'desc' ); } } Mr. JeffreyWay c\u00f3 \u0111\u01b0a ra m\u1ed9t th\u1ea3o lu\u1eadn , v\u00e0 \u0111\u01b0a ra m\u1ed9t v\u00e0i kh\u1ea3 n\u0103ng: Kh\u00f4ng c\u1ea7n test method n\u00e0y? Th\u1ef1c hi\u1ec7n integration test v\u1edbi test database, b\u1eb1ng c\u00e1ch insert m\u1ed9t v\u00e0i record v\u00e0o db, g\u1ecdi method v\u00e0 assert method tr\u1ea3 v\u1ec1 correct row. Partial mock class User v\u00e0 verify method orderBy \u0111\u01b0\u1ee3c g\u1ecdi. H\u1ea7u h\u1ebft c\u00e1c \u00fd \u0111\u1ec1u \u0111\u1ed3ng t\u00ecnh v\u1edbi c\u00e1ch th\u1ee9 2, v\u00ec: Ch\u1ec9 \u0111\u01a1n gi\u1ea3n ch\u00fang ta \u0111ang s\u1eed d\u1ee5ng c\u00e1c unit c\u1ee7a Eloquent/QueryBuilder m\u00e0 kh\u00f4ng c\u00f3 logic g\u00ec ph\u1ee9c t\u1ea1p Eloquent v\u00e0 QueryBuilder \u0111\u1ec1u \u0111\u00e3 \u0111\u01b0\u1ee3c test \u1edf m\u1ee9c \u0111\u1ed9 unit test \u0111\u1ec3 ki\u1ec3m ch\u1ee9ng t\u00ednh \u0111\u00fang \u0111\u1eafn khi ch\u1ea1y \u0111\u1ed9c l\u1eadp N\u1ebfu th\u1ef1c mock, ch\u00fang ta s\u1ebd expect method orderBy \u0111\u01b0\u1ee3c g\u1ecdi v\u1edbi 2 tham s\u1ed1 age v\u00e0 desc nh\u01b0ng l\u00e0m sao \u0111\u1ec3 bi\u1ebft age c\u00f3 \u0111\u00fang l\u00e0 1 tr\u01b0\u1eddng trong database? V\u00ec th\u1ebf, integration test l\u00e0 c\u00e1ch h\u1ee3p l\u00fd nh\u1ea5t \u1edf \u0111\u00e2y: class UserTest extends TestCase { public function testGetsOldestUser () { // Arrange: Insert two test rows into a test DB Factory :: create ( 'User' , [ 'age' => 20 ]); Factory :: create ( 'User' , [ 'age' => 30 ]); // Act: call the method $oldest = User :: oldest () -> first (); // Assert $this -> assertEquals ( 30 , $oldest -> age ); } }","title":"Test scopes"},{"location":"07-laravel/#test-relationships","text":"Th\u1ef1c hi\u1ec7n assert k\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c relation thu\u1ed9c class t\u01b0\u01a1ng \u1ee9ng: HasMany BelongsTo BelongsToMany ...","title":"Test relationships"},{"location":"07-laravel/#test-custom-methods","text":"VD1: class User extends Model { public function fullname () { return $this -> firstname . ' - ' . $this -> lastname ; } } class UserTest extends TestCase { public function testGetFullName () { $user = new User ; $user -> firstname = 'Edogawa' ; $user -> lastname = 'Conan' ; $this -> assertEquals ( 'Edogawa Conan' , $user -> fullname ()); } }","title":"Test custom methods"},{"location":"07-laravel/#integration-test-cho-viec-thiet-lap-fillable-hidden-casts","text":"Unit test \u0111\u00e3 \u0111\u01b0\u1ee3c framework th\u1ef1c hi\u1ec7n T\u01b0\u01a1ng t\u1ef1 khi test scope, ch\u00fang ta th\u1ef1c hi\u1ec7n integration test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o c\u00e1c field \u0111\u01b0\u1ee3c mapping ch\u00ednh x\u00e1c v\u1edbi DB schema","title":"Integration test cho vi\u1ec7c thi\u1ebft l\u1eadp fillable, hidden, casts"},{"location":"07-laravel/#test-form-request","text":"Kh\u00f4ng th\u1ef1c hi\u1ec7n unit test n\u1ebfu form request ch\u1ec9 khai b\u00e1o rules() v\u00e0 kh\u00f4ng c\u00f3 logic g\u00ec \u0111\u1eb7c bi\u1ec7t? V\u00ec vi\u1ec7c test c\u00e1c rule validation \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel th\u1ef1c hi\u1ec7n trong core framework, ch\u00fang ta ch\u1ec9 khai b\u00e1o s\u1eed d\u1ee5ng n\u00f3! M\u1ed9t c\u00e1ch kh\u00e1c \u0111\u1ec3 th\u1ef1c hi\u1ec7n unit test \u0111\u00f3 l\u00e0 t\u1ef1 validate FormRequest th\u00f4ng qua Validator::make() , tuy nhi\u00ean n\u00ean nh\u1edb l\u00e0 FormRequest c\u00f3 th\u1ec3 override l\u1ea1i method getValidatorInstance() \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 logic kh\u00e1c. VD chi ti\u1ebft t\u1ea1i \u0111\u00e2y: https://gist.github.com/tuanpht/37394e0df10d48d08d0d406c9a7dd477 Thay v\u00e0o \u0111\u00f3 ch\u00fang ta th\u1ef1c hi\u1ec7n integration test khi test controller, v\u00ec m\u1ee5c \u0111\u00edch c\u1ee7a class form request th\u01b0\u1eddng ch\u1ec9 \u0111\u1ec3 t\u00e1ch ph\u1ea7n khai b\u00e1o rule ra kh\u1ecfi controller, n\u00ean c\u1ea7n test t\u00edch h\u1ee3p \u0111\u1ec3 n\u00f3 c\u00f3 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 mong mu\u1ed1n khi k\u1ebft h\u1ee3p v\u1edbi controller hay kh\u00f4ng, response khi validate failed l\u00e0 g\u00ec...","title":"Test Form request"},{"location":"07-laravel/#test-controller","text":"Nh\u1eafc l\u1ea1i v\u1ec1 nhi\u1ec7m v\u1ee5 c\u1ee7a Controller: \u0110i\u1ec1u h\u01b0\u1edbng HTTP request G\u1ecdi \u0111\u1ebfn domain object \u0111\u1ec3 th\u1ef1c hi\u1ec7n logic v\u00e0 l\u1ea5y k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 (Fat Model - Skinny Controller, kh\u00f4ng s\u1eed d\u1ee5ng tr\u1ef1c ti\u1ebfp Eloquent Model m\u00e0 s\u1ebd c\u00f3 1 t\u1ea7ng trung gian (repository, service)) Ngo\u00e0i ra c\u00e1c action nh\u01b0 th\u00eam/s\u1eeda th\u01b0\u1eddng s\u1eed d\u1ee5ng th\u00eam FormRequest C\u1ea7n test nh\u1eefng g\u00ec: Request c\u00f3 th\u00e0nh c\u00f4ng kh\u00f4ng? User c\u00f3 \u0111\u01b0\u1ee3c redirect \u0111\u1ebfn \u0111\u00fang page kh\u00f4ng? Message c\u00f3 hi\u1ec3n th\u1ecb \u0111\u00fang cho user kh\u00f4ng? C\u00f3 tr\u1ea3 v\u1ec1 view \u0111\u00fang kh\u00f4ng v\u00e0 c\u00e1c bi\u1ebfn c\u00f3 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 cho view kh\u00f4ng? N\u1ebfu l\u00e0 api th\u00ec format tr\u1ea3 v\u1ec1 c\u00f3 \u0111\u00fang kh\u00f4ng? Th\u1ef1c hi\u1ec7n test: Do ta \u0111\u00e3 t\u00e1ch logic DB s\u1eed d\u1ee5ng repository (service) n\u00ean integration test controller c\u00f3 th\u1ec3 mock repository v\u00e0 th\u1ef1c hi\u1ec7n test repository integrate v\u1edbi DB ri\u00eang bi\u1ec7t Th\u1ef1c hi\u1ec7n test t\u00edch h\u1ee3p v\u1edbi FormRequest, t\u1ea1o ra c\u00e1c input m\u1eabu v\u00e0 test c\u00e1c tr\u01b0\u1eddng h\u1ee3p input \u0111\u00fang, input sai, assert response t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u1eebng tr\u01b0\u1eddng h\u1ee3p C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng SQLite in-memory database khi th\u1ef1c hi\u1ec7n integration test thay v\u00ec MySQL \u0111\u1ec3 c\u1ea3i thi\u1ec7n hi\u1ec7u n\u0103ng v\u00e0 t\u0103ng t\u1ed1c qu\u00e1 tr\u00ecnh test. Tuy nhi\u00ean c\u00f3 m\u1ed9t ch\u00fa \u00fd l\u00e0 database migration hay database seed ph\u1ea3i \u0111\u01b0\u1ee3c ch\u1ea1y trong qu\u00e1 tr\u00ecnh test ch\u1ee9 kh\u00f4ng th\u1ec3 ch\u1ea1y tr\u01b0\u1edbc khi ch\u1ea1y test. Khi \u0111\u00f3 ch\u00fang ta s\u1eed d\u1ee5ng trait RefreshDatabase \u0111\u1ec3 v\u1eeba refresh database sau m\u1ed7i test case. C\u00f2n khi s\u1eed d\u1ee5ng database test l\u00e0 MySQL th\u00ec th\u1ef1c hi\u1ec7n migration tr\u01b0\u1edbc khi v\u00e0 s\u1eed d\u1ee5ng DatabaseTransactions thay v\u00ec ph\u1ea3i ch\u1ea1y l\u1ea1i migration trong m\u1ed7i test case. C\u00f3 th\u1ec3 t\u1ea1o 1 trait chung cho test DB: trait SetupDatabaseTrait { use RefreshDatabase ; // For SQLite in memory // use DatabaseTransactions; // For other DB connections } class NewsApiTest extends TestCase { use SetupDatabaseTrait ; } Khi mu\u1ed1n chuy\u1ec3n \u0111\u1ed5i database test gi\u1eefa MySQL v\u00e0 SQLite th\u00ec ch\u1ec9 c\u1ea7n s\u1eeda l\u1ea1i trong trait SetupDatabaseTrait .","title":"Test Controller"},{"location":"08-checklist/","text":"Checklist \u00b6 [1] Self-describing test method \u00b6 Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd () [2] A3 (Arrange, Asset, Act) \u00b6 A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); } [3] Use sematic/proper assert method \u00b6 Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); [4] If you write code, write tests \u00b6 Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1 [5] Unit vs Integration? \u00b6 Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code. [6] My tests are fast! \u00b6 Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm [7] Quality over code coverage number! \u00b6 S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing Pull request template \u00b6 Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Checklist"},{"location":"08-checklist/#checklist","text":"","title":"Checklist"},{"location":"08-checklist/#1-self-describing-test-method","text":"Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd ()","title":"[1] Self-describing test method"},{"location":"08-checklist/#2-a3-arrange-asset-act","text":"A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); }","title":"[2] A3 (Arrange, Asset, Act)"},{"location":"08-checklist/#3-use-sematicproper-assert-method","text":"Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"[3] Use sematic/proper assert method"},{"location":"08-checklist/#4-if-you-write-code-write-tests","text":"Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1","title":"[4] If you write code, write tests"},{"location":"08-checklist/#5-unit-vs-integration","text":"Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code.","title":"[5] Unit vs Integration?"},{"location":"08-checklist/#6-my-tests-are-fast","text":"Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm","title":"[6] My tests are fast!"},{"location":"08-checklist/#7-quality-over-code-coverage-number","text":"S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing","title":"[7] Quality over code coverage number!"},{"location":"08-checklist/#pull-request-template","text":"Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Pull request template"},{"location":"09-references/","text":"T\u00e0i li\u1ec7u kh\u00e1c \u00b6 Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/ M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c \u00b6 Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"09-references/#tai-lieu-khac","text":"Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"09-references/#mot-so-ky-thuat-khac","text":"Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c"},{"location":"en/Conventions/","text":"Laravel Testing Conventions \u00b6 Folder Structure \u00b6 All Unit Tests MUST be placed inside the tests/Unit folder All Integration Test MUST be placed inside the tests/Feature folder Contents of the Unit and Feature folders MUST have the same structure with the main app folder. For example, unit tests for file app/Models/User.php MUST be written in tests/Unit/Models/UserTest.php Naming Convention \u00b6 Each test file MUST have a specific namespace. The namespace MUST start with Tests\\ (or ASampleProjectTests\\ ), then followed by the folder structure. For example, namespace for tests/Unit/Models/UserTest.php file MUST be Tests\\Unit\\Models\\UserTest (or ASampleProjectTests\\Unit\\Models\\UserTest ) For better readability, use snake_case for test function's name. A test function has to start with test , so here is an example: public function test_it_throws_an_exception_when_email_is_too_long() { } Non-test function can stick with PSR-2 rule, that uses camelCase for function name. Unit Test Required Components \u00b6 Controllers : with disabled events handling. All external components MUST be mocked. Requests (if present): test validation Models : getters, setters, additional features Transformers / Presenters (if present): test output results for different source sets Repositories (if present): test each method for creating correct SQL queries OR correct calls to mocked query builder Event listeners Queue jobs Auth policies And any additional project-specific classes Integration Test Required Components \u00b6 Routes : test input/output with integration in a whole system Route authentication Code Coverage \u00b6 Code Coverage for the entire project SHOULD be greater than 80%","title":"Laravel Testing Conventions"},{"location":"en/Conventions/#laravel-testing-conventions","text":"","title":"Laravel Testing Conventions"},{"location":"en/Conventions/#folder-structure","text":"All Unit Tests MUST be placed inside the tests/Unit folder All Integration Test MUST be placed inside the tests/Feature folder Contents of the Unit and Feature folders MUST have the same structure with the main app folder. For example, unit tests for file app/Models/User.php MUST be written in tests/Unit/Models/UserTest.php","title":"Folder Structure"},{"location":"en/Conventions/#naming-convention","text":"Each test file MUST have a specific namespace. The namespace MUST start with Tests\\ (or ASampleProjectTests\\ ), then followed by the folder structure. For example, namespace for tests/Unit/Models/UserTest.php file MUST be Tests\\Unit\\Models\\UserTest (or ASampleProjectTests\\Unit\\Models\\UserTest ) For better readability, use snake_case for test function's name. A test function has to start with test , so here is an example: public function test_it_throws_an_exception_when_email_is_too_long() { } Non-test function can stick with PSR-2 rule, that uses camelCase for function name.","title":"Naming Convention"},{"location":"en/Conventions/#unit-test-required-components","text":"Controllers : with disabled events handling. All external components MUST be mocked. Requests (if present): test validation Models : getters, setters, additional features Transformers / Presenters (if present): test output results for different source sets Repositories (if present): test each method for creating correct SQL queries OR correct calls to mocked query builder Event listeners Queue jobs Auth policies And any additional project-specific classes","title":"Unit Test Required Components"},{"location":"en/Conventions/#integration-test-required-components","text":"Routes : test input/output with integration in a whole system Route authentication","title":"Integration Test Required Components"},{"location":"en/Conventions/#code-coverage","text":"Code Coverage for the entire project SHOULD be greater than 80%","title":"Code Coverage"},{"location":"en/Introduction/","text":"Introduction to Laravel Testing \u00b6 Test Case \u00b6 Test Case is a commonly used term for a specific test. This is usually the smallest unit of testing. A Test Case will consist of information such as requirements testing (a set of inputs, execution preconditions), test steps, verification steps, prerequisites, outputs, test environment, etc. Unit Test \u00b6 Unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use. In a Laravel project, writing Unit test is the procedure in which all test cases for particular function/method are witten. Unit test should be designed to test the function independently . In other words: A requires B to run. Even when B is broken, unit test of A SHOULD PASS if there are no problems with A . A good Unit test SHOULD NOT : Trigger to run codes from other funtions in project Hit the database Use the file system Access the network ... Integration Test \u00b6 Integration testing is the phase in software testing in which individual software modules are combined and tested as a group. Unit tests help us to ensure that every single function works correctly. Integration tests help us to ensure that different parts of the project works flawlessly when combines with each others in the real life. PHPUnit \u00b6 PHPUnit is a programmer-oriented testing framework for PHP. It is an instance of the xUnit architecture for unit testing frameworks. Installation Guide Per-project installation \u00b6 $ composer require --dev phpunit/phpunit Laravel project is already integrated with PHPUnit. You can start testing your App using the command: $ ./vendor/bin/phpunit Local per-project installation is highly recommented as you might have dependencies on different versions of PHPUnit in different projects. Global installation \u00b6 Via download: $ wget https://phar.phpunit.de/phpunit.phar $ chmod +x phpunit.phar $ sudo mv phpunit.phar /usr/local/bin/phpunit Via composer: $ composer global require phpunit/phpunit Make sure you have added /home/<user>/.composer/vendor/bin or c:\\Users<user>\\AppData\\Roaming\\Composer\\vendor\\bin to your PATH variable. You can run globally installed PHPUnit from anywere: $ phpunit Code Coverage \u00b6 Code coverage is a measure used to describe the degree to which the source code of a program is executed when a particular test suite runs. In other words, code coverage is a way of ensuring that your tests are actually testing your codes! Code coverage fomular: Code Coverage = (Number of Lines of Code Called By Your Tests) / (Total Number of Relevant Lines of Code) x 100% For examples: If your code coverage is 90%, that means 90% of your codes in project have been called and run when testing. - Code Coverage can be generated by PHPUnit with Xdebug enabled. Therefore, please make sure that you have the Xdebug installed and enabled. Check the Xdebug Installation Guide - You can run PHPUnit and generate coverage report in HTML format by the following command: phpunit --coverage-html <dir> // Generate code coverage report in Clover XML format. phpunit --coverage-clover <file> - Code Coverage is a really useful tool for finding untested codes in your project. However, it is not a powerful number that can state how good your tests are. Documents \u00b6 PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing","title":"Introduction to Laravel Testing"},{"location":"en/Introduction/#introduction-to-laravel-testing","text":"","title":"Introduction to Laravel Testing"},{"location":"en/Introduction/#test-case","text":"Test Case is a commonly used term for a specific test. This is usually the smallest unit of testing. A Test Case will consist of information such as requirements testing (a set of inputs, execution preconditions), test steps, verification steps, prerequisites, outputs, test environment, etc.","title":"Test Case"},{"location":"en/Introduction/#unit-test","text":"Unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use. In a Laravel project, writing Unit test is the procedure in which all test cases for particular function/method are witten. Unit test should be designed to test the function independently . In other words: A requires B to run. Even when B is broken, unit test of A SHOULD PASS if there are no problems with A . A good Unit test SHOULD NOT : Trigger to run codes from other funtions in project Hit the database Use the file system Access the network ...","title":"Unit Test"},{"location":"en/Introduction/#integration-test","text":"Integration testing is the phase in software testing in which individual software modules are combined and tested as a group. Unit tests help us to ensure that every single function works correctly. Integration tests help us to ensure that different parts of the project works flawlessly when combines with each others in the real life.","title":"Integration Test"},{"location":"en/Introduction/#phpunit","text":"PHPUnit is a programmer-oriented testing framework for PHP. It is an instance of the xUnit architecture for unit testing frameworks. Installation Guide","title":"PHPUnit"},{"location":"en/Introduction/#per-project-installation","text":"$ composer require --dev phpunit/phpunit Laravel project is already integrated with PHPUnit. You can start testing your App using the command: $ ./vendor/bin/phpunit Local per-project installation is highly recommented as you might have dependencies on different versions of PHPUnit in different projects.","title":"Per-project installation"},{"location":"en/Introduction/#global-installation","text":"Via download: $ wget https://phar.phpunit.de/phpunit.phar $ chmod +x phpunit.phar $ sudo mv phpunit.phar /usr/local/bin/phpunit Via composer: $ composer global require phpunit/phpunit Make sure you have added /home/<user>/.composer/vendor/bin or c:\\Users<user>\\AppData\\Roaming\\Composer\\vendor\\bin to your PATH variable. You can run globally installed PHPUnit from anywere: $ phpunit","title":"Global installation"},{"location":"en/Introduction/#code-coverage","text":"Code coverage is a measure used to describe the degree to which the source code of a program is executed when a particular test suite runs. In other words, code coverage is a way of ensuring that your tests are actually testing your codes! Code coverage fomular: Code Coverage = (Number of Lines of Code Called By Your Tests) / (Total Number of Relevant Lines of Code) x 100% For examples: If your code coverage is 90%, that means 90% of your codes in project have been called and run when testing. - Code Coverage can be generated by PHPUnit with Xdebug enabled. Therefore, please make sure that you have the Xdebug installed and enabled. Check the Xdebug Installation Guide - You can run PHPUnit and generate coverage report in HTML format by the following command: phpunit --coverage-html <dir> // Generate code coverage report in Clover XML format. phpunit --coverage-clover <file> - Code Coverage is a really useful tool for finding untested codes in your project. However, it is not a powerful number that can state how good your tests are.","title":"Code Coverage"},{"location":"en/Introduction/#documents","text":"PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing","title":"Documents"},{"location":"en/Knowledge/","text":"Knowledge about Unit Testing \u00b6 Classify \u00b6 Before creating of any test cases, we should determine input values of particular function/method which need to be test. The test cases should be designed to cover all combinations of input values and preconditions. Basically, we usually divide types of test case by 3 types of input dataset for unit testing. Normal : Inputs are normal range values (accepted). A large amount of codes can be covered just by running normal test cases. Boundary : Inputs are at or just beyond its maximum or minimum limits. They are used to identify errors at boundaries rather than finding those exist in center of input domain. Abnormal : Inputs are invalid (illegal or not expected) to test error handling and recovery. For example: Suppose we have a function which validate email address entered by user. The maximum length of an email address is 50 characters. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } we should write the test cases as below: Normal cases public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Test Doubles \u00b6 One of the fundamental requirements of Unit Test is isolation . In general, isolation is hard (if not impposible) as there are always dependencies across the whole project. Therefore, the concept of Test Doubles was born. A Test Double allows us to break the original dependency, helping isolate the unit. Here are some types of Test Doubles Some parts of following definitions are taken from Martin Fowler's Blog Mocks Aren't Stubs Dummies \u00b6 Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists. Fake \u00b6 Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example). Stubs \u00b6 Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test. Mocks \u00b6 Mocks are objects pre-programmed with expectations which form a specification of the calls they are expected to receive. Stubs vs Mocks \u00b6 Stub helps us to run test. Otherwise, Mock is an object which runs the test. A Fake which you verify calls against is a Mock. Otherwise, it's a Stub. Stub can never fail the test. Otherwise, Mock can. Examples \u00b6 Here are some PHP Mocking Frameworks that you can use to easily create Mocks for testing: Mockery: It is highly recommended. It has been already integrated with Laravel Project. Document here Prophecy: A part of PHPSpec project, but can be used outside PHPSpec. Check it here Examples of creating Stubs and Mocks using Mockery // TODO","title":"Knowledge about Unit Testing"},{"location":"en/Knowledge/#knowledge-about-unit-testing","text":"","title":"Knowledge about Unit Testing"},{"location":"en/Knowledge/#classify","text":"Before creating of any test cases, we should determine input values of particular function/method which need to be test. The test cases should be designed to cover all combinations of input values and preconditions. Basically, we usually divide types of test case by 3 types of input dataset for unit testing. Normal : Inputs are normal range values (accepted). A large amount of codes can be covered just by running normal test cases. Boundary : Inputs are at or just beyond its maximum or minimum limits. They are used to identify errors at boundaries rather than finding those exist in center of input domain. Abnormal : Inputs are invalid (illegal or not expected) to test error handling and recovery. For example: Suppose we have a function which validate email address entered by user. The maximum length of an email address is 50 characters. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } we should write the test cases as below: Normal cases public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Classify"},{"location":"en/Knowledge/#test-doubles","text":"One of the fundamental requirements of Unit Test is isolation . In general, isolation is hard (if not impposible) as there are always dependencies across the whole project. Therefore, the concept of Test Doubles was born. A Test Double allows us to break the original dependency, helping isolate the unit. Here are some types of Test Doubles Some parts of following definitions are taken from Martin Fowler's Blog Mocks Aren't Stubs","title":"Test Doubles"},{"location":"en/Knowledge/#dummies","text":"Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.","title":"Dummies"},{"location":"en/Knowledge/#fake","text":"Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example).","title":"Fake"},{"location":"en/Knowledge/#stubs","text":"Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.","title":"Stubs"},{"location":"en/Knowledge/#mocks","text":"Mocks are objects pre-programmed with expectations which form a specification of the calls they are expected to receive.","title":"Mocks"},{"location":"en/Knowledge/#stubs-vs-mocks","text":"Stub helps us to run test. Otherwise, Mock is an object which runs the test. A Fake which you verify calls against is a Mock. Otherwise, it's a Stub. Stub can never fail the test. Otherwise, Mock can.","title":"Stubs vs Mocks"},{"location":"en/Knowledge/#examples","text":"Here are some PHP Mocking Frameworks that you can use to easily create Mocks for testing: Mockery: It is highly recommended. It has been already integrated with Laravel Project. Document here Prophecy: A part of PHPSpec project, but can be used outside PHPSpec. Check it here Examples of creating Stubs and Mocks using Mockery // TODO","title":"Examples"},{"location":"en/Integration/Integration/","text":"Integration Tests \u00b6 Purpose of integration tests is to make sure that all components work together as needed. While making such tests, remember that changes to data storage or interactions with external services might happen. In order to handle such cases properly, you might still need to create Test Doubles for some classes. Which classes should be doubled depends on your testing approach and might be different depending on app size. Guide \u00b6 Laravel provides 2 ways to create integration tests: making HTTP requests to routes and browser-based testing with laravel/dusk package. It is required to have HTTP tests, while browser tests don't have any specific requirements. Integration tests must cover EVERY route of application and complete following purposes: HTTP - Authentication and policy tests. Each case must have separate test assertion. - Check valid status codes for every type of response. - Check correct redirect codes and paths on different events. - Test validity of JSON responses. - Test Error handlers for correct responses. - Check validity of API versions (if necessary). Database - Ensure data is written to database correctly during requests. - Test migration process. - Test abnormal data insertions are handled properly. If your application interacts with external services and servers, you either need to use staging versions of such services or mock your client classes. Testing environment can be defined with special configurations and variables, e. g. testing database connection with DB_TEST_DATABASE env variable. However it is strictly recommended to replace production variables instead in phpunit.xml or CI configuration. It is good to run tests twice with APP_ENV set both to testing and production . <php> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"CACHE_DRIVER\" value= \"array\" /> <env name= \"SESSION_DRIVER\" value= \"array\" /> <env name= \"QUEUE_DRIVER\" value= \"sync\" /> <env name= \"DB_HOST\" value= \"test.database.local\" /> <env name= \"DB_USERNAME\" value= \"testing\" /> <env name= \"DB_PASSWORD\" value= \"secret\" /> </php>","title":"Integration Tests"},{"location":"en/Integration/Integration/#integration-tests","text":"Purpose of integration tests is to make sure that all components work together as needed. While making such tests, remember that changes to data storage or interactions with external services might happen. In order to handle such cases properly, you might still need to create Test Doubles for some classes. Which classes should be doubled depends on your testing approach and might be different depending on app size.","title":"Integration Tests"},{"location":"en/Integration/Integration/#guide","text":"Laravel provides 2 ways to create integration tests: making HTTP requests to routes and browser-based testing with laravel/dusk package. It is required to have HTTP tests, while browser tests don't have any specific requirements. Integration tests must cover EVERY route of application and complete following purposes: HTTP - Authentication and policy tests. Each case must have separate test assertion. - Check valid status codes for every type of response. - Check correct redirect codes and paths on different events. - Test validity of JSON responses. - Test Error handlers for correct responses. - Check validity of API versions (if necessary). Database - Ensure data is written to database correctly during requests. - Test migration process. - Test abnormal data insertions are handled properly. If your application interacts with external services and servers, you either need to use staging versions of such services or mock your client classes. Testing environment can be defined with special configurations and variables, e. g. testing database connection with DB_TEST_DATABASE env variable. However it is strictly recommended to replace production variables instead in phpunit.xml or CI configuration. It is good to run tests twice with APP_ENV set both to testing and production . <php> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"CACHE_DRIVER\" value= \"array\" /> <env name= \"SESSION_DRIVER\" value= \"array\" /> <env name= \"QUEUE_DRIVER\" value= \"sync\" /> <env name= \"DB_HOST\" value= \"test.database.local\" /> <env name= \"DB_USERNAME\" value= \"testing\" /> <env name= \"DB_PASSWORD\" value= \"secret\" /> </php>","title":"Guide"},{"location":"en/Unit/Common/","text":"Common Testing Rules \u00b6 With most components like events, event listeners, subscribers, queue jobs and validation rule classes, you should follow the same basic rules: Test __construct() method to make sure that properties are assigned. Cover all public methods with necessary tests. Pay the most attention to the main method (e. g. handle for listeners or passes for rules). Coverage is not necessary for methods, which return text (e. g. message for rules). Coverage is optional for basic get/set methods, which don't modify input arguments. Mocking DI instances \u00b6 Laravel uses injections in various cases and your components might use it via method/constructor injection or directly inside methods via container instance or facades. For such cases it is very important to create test doubles for every injected instance and make sure that no additional instances are resolved. By default, TestCase class provided with Laravel automatically instantiates application instance. It is good to use this approach, but highly recommended to have an additional basic test case with mocked app. class MockApplicationTestCase extends TestCase { /** * Creates the application. * * @return \\Illuminate\\Foundation\\Application|\\Mockery\\Mock */ public function createApplication () { return m :: mock ( \\Illuminate\\Foundation\\Application :: class ) -> makePartial (); } } This approach will help you to control all DI process carefully. Now you can inject test doubles simply. public function test_it_assignes_event_handler () { $e = m :: mock ( Dispatcher :: class ); $this -> app -> bind ( Dispatcher :: class , $e ); // Test event assignment with mocked class. } Testing Database Queries \u00b6 Isolation is very important for test cases and it is critical to make sure that SQL queries are built properly. All database interactions in Laravel are made through Illuminate\\Database\\Connection class, which methods can be easily mocked with Mockery package. $connection = m :: mock ( Connection :: class ); $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); // DB::table is the most common call and it is simpler to mock the method manually instead of dealing with partial mocks. $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Test your queries $connection -> shouldReceive ( 'select' ) -> with ( 'select * from \"streets\" limit 10 offset 0' , // query [], // bindings m :: any () // useReadPdo. use true/false if necessary ) -> andReturn ([ // 'query result' ]); $someClass -> methodUsingConnection (); Sometimes it is handy to inject mocked connection into DI and have it available everywhere. Direct property modification is used here, because default extension requires mocking of connection methods, which we don't need. protected $db ; public function setUp () { $this -> afterApplicationCreated ( function () { $this -> db = m :: mock ( Connection :: class . '[select,update,insert,delete]' , [ m :: mock ( \\PDO :: class )] ); $manager = $this -> app [ 'db' ]; $manager -> setDefaultConnection ( 'mock' ); $r = new \\ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $list = $p -> getValue ( $manager ); $list [ 'mock' ] = $this -> db ; $p -> setValue ( $manager , $list ); }); parent :: setUp (); } You should remember following things for database testing: You may have named connections, be careful with that. Models get connections via ConnectionResolverInterface which is assigned in the model itself and might differ. Queries are created differently using different grammars. Use the one suitable for your project. Examples \u00b6 Laravel event and tests Listeners and tests Database mock setup and usage","title":"Common Testing Rules"},{"location":"en/Unit/Common/#common-testing-rules","text":"With most components like events, event listeners, subscribers, queue jobs and validation rule classes, you should follow the same basic rules: Test __construct() method to make sure that properties are assigned. Cover all public methods with necessary tests. Pay the most attention to the main method (e. g. handle for listeners or passes for rules). Coverage is not necessary for methods, which return text (e. g. message for rules). Coverage is optional for basic get/set methods, which don't modify input arguments.","title":"Common Testing Rules"},{"location":"en/Unit/Common/#mocking-di-instances","text":"Laravel uses injections in various cases and your components might use it via method/constructor injection or directly inside methods via container instance or facades. For such cases it is very important to create test doubles for every injected instance and make sure that no additional instances are resolved. By default, TestCase class provided with Laravel automatically instantiates application instance. It is good to use this approach, but highly recommended to have an additional basic test case with mocked app. class MockApplicationTestCase extends TestCase { /** * Creates the application. * * @return \\Illuminate\\Foundation\\Application|\\Mockery\\Mock */ public function createApplication () { return m :: mock ( \\Illuminate\\Foundation\\Application :: class ) -> makePartial (); } } This approach will help you to control all DI process carefully. Now you can inject test doubles simply. public function test_it_assignes_event_handler () { $e = m :: mock ( Dispatcher :: class ); $this -> app -> bind ( Dispatcher :: class , $e ); // Test event assignment with mocked class. }","title":"Mocking DI instances"},{"location":"en/Unit/Common/#testing-database-queries","text":"Isolation is very important for test cases and it is critical to make sure that SQL queries are built properly. All database interactions in Laravel are made through Illuminate\\Database\\Connection class, which methods can be easily mocked with Mockery package. $connection = m :: mock ( Connection :: class ); $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); // DB::table is the most common call and it is simpler to mock the method manually instead of dealing with partial mocks. $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Test your queries $connection -> shouldReceive ( 'select' ) -> with ( 'select * from \"streets\" limit 10 offset 0' , // query [], // bindings m :: any () // useReadPdo. use true/false if necessary ) -> andReturn ([ // 'query result' ]); $someClass -> methodUsingConnection (); Sometimes it is handy to inject mocked connection into DI and have it available everywhere. Direct property modification is used here, because default extension requires mocking of connection methods, which we don't need. protected $db ; public function setUp () { $this -> afterApplicationCreated ( function () { $this -> db = m :: mock ( Connection :: class . '[select,update,insert,delete]' , [ m :: mock ( \\PDO :: class )] ); $manager = $this -> app [ 'db' ]; $manager -> setDefaultConnection ( 'mock' ); $r = new \\ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $list = $p -> getValue ( $manager ); $list [ 'mock' ] = $this -> db ; $p -> setValue ( $manager , $list ); }); parent :: setUp (); } You should remember following things for database testing: You may have named connections, be careful with that. Models get connections via ConnectionResolverInterface which is assigned in the model itself and might differ. Queries are created differently using different grammars. Use the one suitable for your project.","title":"Testing Database Queries"},{"location":"en/Unit/Common/#examples","text":"Laravel event and tests Listeners and tests Database mock setup and usage","title":"Examples"},{"location":"en/Unit/Controllers/","text":"Testing Controllers \u00b6 Controllers implement the main request processing algorithm. They must be paid the most attention during testing process. Unit tests written for controllers must be totally isolated and every external call from inside controller method must be mocked. Depending on your application logic, controllers might implement validation in method logic or via Form Requests. If first, controller tests must include cases with boundary and abnormal request input. Otherwise those cases should be tested in appropriate form request test cases. However, this affects only user input. Data provided from outside controller method must be mocked properly with all kinds of data. Guide \u00b6 Examples \u00b6 Resource web controller and tests","title":"Testing Controllers"},{"location":"en/Unit/Controllers/#testing-controllers","text":"Controllers implement the main request processing algorithm. They must be paid the most attention during testing process. Unit tests written for controllers must be totally isolated and every external call from inside controller method must be mocked. Depending on your application logic, controllers might implement validation in method logic or via Form Requests. If first, controller tests must include cases with boundary and abnormal request input. Otherwise those cases should be tested in appropriate form request test cases. However, this affects only user input. Data provided from outside controller method must be mocked properly with all kinds of data.","title":"Testing Controllers"},{"location":"en/Unit/Controllers/#guide","text":"","title":"Guide"},{"location":"en/Unit/Controllers/#examples","text":"Resource web controller and tests","title":"Examples"},{"location":"en/Unit/Middleware/","text":"Testing Middleware Classes \u00b6 Middleware test cases are not different from most other classes. Except you need to pay more attention to $next callback. Guide \u00b6 You should remember that middleware might return data without calling $next and that might be an unexpected case. There are X cases of middleware execution: Returns $next closure result: basic before middleware. Returns response without calling $next : abortion middleware. Receives response from $next and modifies it: basic after middleware. Depending on your implementation, these cases might be mixed (e. g. conditional abortion or before/after execution). In order to mock $next callback, you can simply create a closure with assertions within test case: public function test_middleware_appends_header () { //... $next = function ( $request ) { $this -> assertEquals ( 'Appended_header_data' , $request -> headers -> get ( 'header-name' )); return response ( 'ok' ); } $middleware -> handle ( $request , $next ); //... } Sometimes middleware might interact with session, cache or other components. In this case you must mock those components properly. In the special case of session modifications, it is highly recommended to use $request->getSession() in method body instead of facades or dependency injection. Examples \u00b6 Middlewares Middleware tests","title":"Testing Middleware Classes"},{"location":"en/Unit/Middleware/#testing-middleware-classes","text":"Middleware test cases are not different from most other classes. Except you need to pay more attention to $next callback.","title":"Testing Middleware Classes"},{"location":"en/Unit/Middleware/#guide","text":"You should remember that middleware might return data without calling $next and that might be an unexpected case. There are X cases of middleware execution: Returns $next closure result: basic before middleware. Returns response without calling $next : abortion middleware. Receives response from $next and modifies it: basic after middleware. Depending on your implementation, these cases might be mixed (e. g. conditional abortion or before/after execution). In order to mock $next callback, you can simply create a closure with assertions within test case: public function test_middleware_appends_header () { //... $next = function ( $request ) { $this -> assertEquals ( 'Appended_header_data' , $request -> headers -> get ( 'header-name' )); return response ( 'ok' ); } $middleware -> handle ( $request , $next ); //... } Sometimes middleware might interact with session, cache or other components. In this case you must mock those components properly. In the special case of session modifications, it is highly recommended to use $request->getSession() in method body instead of facades or dependency injection.","title":"Guide"},{"location":"en/Unit/Middleware/#examples","text":"Middlewares Middleware tests","title":"Examples"},{"location":"en/Unit/Models/","text":"Testing Models \u00b6 Models are ones of mostly used classes in Laravel applications. And at the same time they are the most complicated from all default components. Depending on implementation, models might include validation, external services connection (e. g. ElasticSearch indexing), property getters and various custom methods. As far as models might be used in any part of application, they must be tested carefully. Guide \u00b6 Configuration properties \u00b6 Any model includes some default configurations with public or protected properties. These properties might affect application behaivor a lot, but they are the most easy to test. You can simply assert return values of that property getters: public function test_contains_valid_fillable_properties () { $m = new User (); $this -> assertEquals ([ 'name' , 'email' ], $m -> getFillable ()); } Following method tests must be included in tests: $fillable -> getFillable() $guarded -> getGuarded() $table -> getTable() $primaryKey -> getKeyName() $connection -> getConnectionName() : in case multiple connections exist. $hidden -> getHidden() $visible -> getVisible() $casts -> getCasts() : note that method appends incrementing key. $dates -> getDates() : note that method appends [static::CREATED_AT, static::UPDATED_AT] . newCollection() : assert collection is exact type. Use assertEquals on get_class() result, but not assertInstanceOf . It is fine to put all checks inside one test method, e. g. test_model_configuration() Relations \u00b6 Relations are defined as methods returning appropriate relation classes. In some cases relation may be defined with custom foreign keys or additional query changes. The best way to test relation config is to assert values on returned Relation instance. In all default cases, any relations is being created with $model->newQuery() as builder instance. If not modified, it can be simply asserted with assertEquals public function test_user_relation () { $m = new Post (); $relation = $m -> user (); $this -> assertInstanceOf ( BelongsTo :: class , $relation ); $this -> assertEquals ( 'user_id' , $relation -> getForeignKey ()); $this -> assertEquals ( 'id' , $relation -> getOwnerKey ()); //... $this -> assertEquals ( $m -> newQuery (), $relation -> getQuery ()); } Depending on relation type, following test asserts must be included: getQuery() : assert query has not been modified or modified properly. getForeignKey() : any HasOneOrMany or BelongsTo relation, but key type differs (see documentaiton). getQualifiedParentKeyName() : in case of HasOneOrMany relation, there is no getLocalKey() method, so this one should be asserted. getOwnerKey() : BelongsTo relation and its extendings. getQualifiedForeignPivotKeyName() : BelongsToMany relation. getQualifiedRelatedPivotKeyName() : BelongsToMany relation. getTable() : BelongsToMany relation. Optional, because included in methods above. getMorphType() : any polymorphic relations. Property values \u00b6 Many models might include property mutators or getters. Those methods modify output in many cases including __get and toArray() results. There must be a test case, which makes assertion on all properties. For such case, you can use unguarded helper or remove guards manually. public function test_properties_have_valid_values () { User :: unguard (); $initial = [ 'name' => 'Jonh Doe' , 'email' => 'jonh@example.com' , ]; $m = new User ( $initial ); $this -> assertEquals ( $initial , $m -> setHidden ([]), $m -> attributesToArray ()); } In case any getter exists, values might be modified, so tests should cover such additions. Use getAttributeValue() to make sure, getter is called and property, and call to getter itself to test different values. As far as mutators might also exist, use setRawAttributes to set initial values to ignore any unexpected value changes. public function test_status_getter () { $m = new User (); $m -> setRawAttributes ([ 'status' => 1 , ]); // Test if getter is working. $this -> assertEquals ( 'enabled' , $m -> getAttributeValue ( 'status' )); // Test getter logic with different values. $this -> assertEquals ( 'disabled' , $m -> getStatusAttribute ( 2 )); $this -> assertEquals ( 'pending' , $m -> getStatusAttribute ( 3 )); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> getStatusAttribute ( 4 ); } Same rules apply to mutators. In order to avoid any getters applied, use getAttributes() method for assertions. public function test_status_getter () { $m = new User (); // Test if mutator is working. $m -> setAttribute ( 'status' , 'enabled' ); $this -> assertEquals ( 1 , $m -> getAttributes ()[ 'status' ]); // Test mutator logic with different values. $this -> assertEquals ( 2 , $m -> setStatusAttribute ( 'disabled' ); $this -> assertEquals ( 3 , $m -> setStatusAttribute ( 'pending' ); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> setStatusAttribute ( 'invalid_status' ); } Events \u00b6 Model includes protected static $dispatcher property, which stores application event handler. If your model uses internal events or observers, make sure that proper listeners are assigned by mocking dispatcher class. public function test_listeners_attached () { $d = m :: mock ( \\Illuminate\\Contracts\\Events\\Dispatcher :: class ); User :: setEventDispatcher ( $d ); $name = User :: class ; // Assert that created event has been assigned. Include additional checks if needed. $d -> shouldReceive ( 'listen' ) -> once () -> with ( \"eloquent.created: { $name } \" , m :: any ()); User :: boot (); } Do not use Dispather::hasListeners() method, because events might be assigned from anywhere in the application. Purpose of this test is to make sure that events have been assigned inside the model. Testing of observers should follow the same approach as for testing any usual classes. While event handlers, attached during boot can be accessed via getListeners() method of event dispatcher. However it is highly recommended not to use such assignments and use observers instead. Additional checks. \u00b6 All additional methods and configurations must be tested if present, including but not limited to: Custom model methods. Usage of traits. Custom CREATED_AT and UPDATED_AT keys. $with property if set. $incrementing property if changed by default. $dateFormat property if changed by default. Examples \u00b6 Example abstract model test helper Example model and test","title":"Testing Models"},{"location":"en/Unit/Models/#testing-models","text":"Models are ones of mostly used classes in Laravel applications. And at the same time they are the most complicated from all default components. Depending on implementation, models might include validation, external services connection (e. g. ElasticSearch indexing), property getters and various custom methods. As far as models might be used in any part of application, they must be tested carefully.","title":"Testing Models"},{"location":"en/Unit/Models/#guide","text":"","title":"Guide"},{"location":"en/Unit/Models/#configuration-properties","text":"Any model includes some default configurations with public or protected properties. These properties might affect application behaivor a lot, but they are the most easy to test. You can simply assert return values of that property getters: public function test_contains_valid_fillable_properties () { $m = new User (); $this -> assertEquals ([ 'name' , 'email' ], $m -> getFillable ()); } Following method tests must be included in tests: $fillable -> getFillable() $guarded -> getGuarded() $table -> getTable() $primaryKey -> getKeyName() $connection -> getConnectionName() : in case multiple connections exist. $hidden -> getHidden() $visible -> getVisible() $casts -> getCasts() : note that method appends incrementing key. $dates -> getDates() : note that method appends [static::CREATED_AT, static::UPDATED_AT] . newCollection() : assert collection is exact type. Use assertEquals on get_class() result, but not assertInstanceOf . It is fine to put all checks inside one test method, e. g. test_model_configuration()","title":"Configuration properties"},{"location":"en/Unit/Models/#relations","text":"Relations are defined as methods returning appropriate relation classes. In some cases relation may be defined with custom foreign keys or additional query changes. The best way to test relation config is to assert values on returned Relation instance. In all default cases, any relations is being created with $model->newQuery() as builder instance. If not modified, it can be simply asserted with assertEquals public function test_user_relation () { $m = new Post (); $relation = $m -> user (); $this -> assertInstanceOf ( BelongsTo :: class , $relation ); $this -> assertEquals ( 'user_id' , $relation -> getForeignKey ()); $this -> assertEquals ( 'id' , $relation -> getOwnerKey ()); //... $this -> assertEquals ( $m -> newQuery (), $relation -> getQuery ()); } Depending on relation type, following test asserts must be included: getQuery() : assert query has not been modified or modified properly. getForeignKey() : any HasOneOrMany or BelongsTo relation, but key type differs (see documentaiton). getQualifiedParentKeyName() : in case of HasOneOrMany relation, there is no getLocalKey() method, so this one should be asserted. getOwnerKey() : BelongsTo relation and its extendings. getQualifiedForeignPivotKeyName() : BelongsToMany relation. getQualifiedRelatedPivotKeyName() : BelongsToMany relation. getTable() : BelongsToMany relation. Optional, because included in methods above. getMorphType() : any polymorphic relations.","title":"Relations"},{"location":"en/Unit/Models/#property-values","text":"Many models might include property mutators or getters. Those methods modify output in many cases including __get and toArray() results. There must be a test case, which makes assertion on all properties. For such case, you can use unguarded helper or remove guards manually. public function test_properties_have_valid_values () { User :: unguard (); $initial = [ 'name' => 'Jonh Doe' , 'email' => 'jonh@example.com' , ]; $m = new User ( $initial ); $this -> assertEquals ( $initial , $m -> setHidden ([]), $m -> attributesToArray ()); } In case any getter exists, values might be modified, so tests should cover such additions. Use getAttributeValue() to make sure, getter is called and property, and call to getter itself to test different values. As far as mutators might also exist, use setRawAttributes to set initial values to ignore any unexpected value changes. public function test_status_getter () { $m = new User (); $m -> setRawAttributes ([ 'status' => 1 , ]); // Test if getter is working. $this -> assertEquals ( 'enabled' , $m -> getAttributeValue ( 'status' )); // Test getter logic with different values. $this -> assertEquals ( 'disabled' , $m -> getStatusAttribute ( 2 )); $this -> assertEquals ( 'pending' , $m -> getStatusAttribute ( 3 )); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> getStatusAttribute ( 4 ); } Same rules apply to mutators. In order to avoid any getters applied, use getAttributes() method for assertions. public function test_status_getter () { $m = new User (); // Test if mutator is working. $m -> setAttribute ( 'status' , 'enabled' ); $this -> assertEquals ( 1 , $m -> getAttributes ()[ 'status' ]); // Test mutator logic with different values. $this -> assertEquals ( 2 , $m -> setStatusAttribute ( 'disabled' ); $this -> assertEquals ( 3 , $m -> setStatusAttribute ( 'pending' ); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> setStatusAttribute ( 'invalid_status' ); }","title":"Property values"},{"location":"en/Unit/Models/#events","text":"Model includes protected static $dispatcher property, which stores application event handler. If your model uses internal events or observers, make sure that proper listeners are assigned by mocking dispatcher class. public function test_listeners_attached () { $d = m :: mock ( \\Illuminate\\Contracts\\Events\\Dispatcher :: class ); User :: setEventDispatcher ( $d ); $name = User :: class ; // Assert that created event has been assigned. Include additional checks if needed. $d -> shouldReceive ( 'listen' ) -> once () -> with ( \"eloquent.created: { $name } \" , m :: any ()); User :: boot (); } Do not use Dispather::hasListeners() method, because events might be assigned from anywhere in the application. Purpose of this test is to make sure that events have been assigned inside the model. Testing of observers should follow the same approach as for testing any usual classes. While event handlers, attached during boot can be accessed via getListeners() method of event dispatcher. However it is highly recommended not to use such assignments and use observers instead.","title":"Events"},{"location":"en/Unit/Models/#additional-checks","text":"All additional methods and configurations must be tested if present, including but not limited to: Custom model methods. Usage of traits. Custom CREATED_AT and UPDATED_AT keys. $with property if set. $incrementing property if changed by default. $dateFormat property if changed by default.","title":"Additional checks."},{"location":"en/Unit/Models/#examples","text":"Example abstract model test helper Example model and test","title":"Examples"},{"location":"en/Unit/Transformers/","text":"Testing Transformers and Presenters \u00b6 Almost every project includes serializations and presenters in one or another way. The default way for Laravel is to use mutators/getters on model classes, however in more complex applications, a variety of ways may be applied. This guide is applicable for general cases of transformers or presenters. Guide \u00b6 Having appropriate transformers is critical for API providing applications and highly recommended for others. Transformer tests must complete following purposes: Ensure data consistency (object structure must not change between commit unexpected). Ensure property mutations are done correctly. Ensure data types match expected output. For many API client applications appearance of new properties or absence of some can be critical. It means that any change to such structure must be under control. Ensure that your transformers always have consistent data public function test_output_contains_valid_structure () { $u = new User ([ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'password' => '123456' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) $u -> setRelation ( 'posts' , [ new Post ([ 'title' => 'Test post' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertEquals ([ 'name' , 'email' , 'created_at' , 'updated_at' , 'posts' ], array_keys ( $t )); $this -> assertTrue ( is_array ( $t [ 'posts' ])); // Additional checks. } If your application implements feature tests for API, it is suitable to replace this check with assertJsonStructure method in feature test case. For JSON outputs it is necessary to check data types, espcecially if your API clients might be written in strict type languages. public function test_data_types () { $u = new User ([ 'id' => '1' , 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'created_at' => Carbon :: now (), ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertInternalType ( 'int' , $t [ 'id' ]); $this -> assertInternalType ( 'string' , $t [ 'name' ]); $this -> assertInternalType ( 'string' , $t [ 'email' ]); $this -> assertInternalType ( 'array' , $t [ 'created_at' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'date' ]); $this -> assertInternalType ( 'int' , $t [ 'created_at' ][ 'timezone_type' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'timezone' ]); }","title":"Testing Transformers and Presenters"},{"location":"en/Unit/Transformers/#testing-transformers-and-presenters","text":"Almost every project includes serializations and presenters in one or another way. The default way for Laravel is to use mutators/getters on model classes, however in more complex applications, a variety of ways may be applied. This guide is applicable for general cases of transformers or presenters.","title":"Testing Transformers and Presenters"},{"location":"en/Unit/Transformers/#guide","text":"Having appropriate transformers is critical for API providing applications and highly recommended for others. Transformer tests must complete following purposes: Ensure data consistency (object structure must not change between commit unexpected). Ensure property mutations are done correctly. Ensure data types match expected output. For many API client applications appearance of new properties or absence of some can be critical. It means that any change to such structure must be under control. Ensure that your transformers always have consistent data public function test_output_contains_valid_structure () { $u = new User ([ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'password' => '123456' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) $u -> setRelation ( 'posts' , [ new Post ([ 'title' => 'Test post' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertEquals ([ 'name' , 'email' , 'created_at' , 'updated_at' , 'posts' ], array_keys ( $t )); $this -> assertTrue ( is_array ( $t [ 'posts' ])); // Additional checks. } If your application implements feature tests for API, it is suitable to replace this check with assertJsonStructure method in feature test case. For JSON outputs it is necessary to check data types, espcecially if your API clients might be written in strict type languages. public function test_data_types () { $u = new User ([ 'id' => '1' , 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'created_at' => Carbon :: now (), ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertInternalType ( 'int' , $t [ 'id' ]); $this -> assertInternalType ( 'string' , $t [ 'name' ]); $this -> assertInternalType ( 'string' , $t [ 'email' ]); $this -> assertInternalType ( 'array' , $t [ 'created_at' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'date' ]); $this -> assertInternalType ( 'int' , $t [ 'created_at' ][ 'timezone_type' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'timezone' ]); }","title":"Guide"},{"location":"en/Unit/Validation/","text":"Testing Validation Rules. \u00b6 There are 2 approaches for testing validation rules: 1. Check if necessary rules has been set 2. Check if invalid data cannot pass validation While first is very simple and does not require any complicated test cases, the second might need a lot of data to test. It is highly recommended to provide new test cases for every appearance of invalid data during user testing or production use. Guide \u00b6 Testing validation rules \u00b6 Validation rules are set in 2 common ways: various use inside app logic (via controller validate() method, Validator facade, etc.) or via form requests. First case must be tested via mocking validator instance and running test on the class which contains logic. public function test_store_method () { $c = new Controller (); $v = m :: mock ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); // Substitute Validator instance in DI container. $previous = $this -> app -> make ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); $this -> app -> bind ( \\Illuminate\\Contracts\\Validation\\Factory :: class , $v ); $r = new Request (); $request -> headers -> set ( 'content-type' , 'application/json' ); $data = [ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , ]; $request -> setJson ( new ParameterBag ( $data )); $v -> expects ( 'make' ) -> once () -> with ( $data , [ 'name' => 'required' , 'email' => 'required|email' , ], m :: any (), m :: any ()) -> andReturnUsing ( function ( ... $args ) { return $previous -> make ( ... $args ); }); $c -> store ( $request ); // Additional assertions. } In case of form requests it can be done much simpler: public function test_it_contains_valid_rules () { $r = new StoreRequest (); $this -> assertEquals ([ 'name' => 'required' , 'email' => 'required|email' , ], $r -> rules ()); } Testing abnormal data \u00b6 It is impossible to predict all cases of abnormal data, however when such cases appear, tests must be extended. Abnormal data is detected during application use. Implement test case for controller or other instance with abnormal data to emulate failure. Implement fix and provide test case with expected interruption. Testing custom validation rules \u00b6 If your application contains custom validations, you must include test cases for such rules in a separate test case. These tests are required not to check user input, but to test validation logic itself and be sure that it fails or passes in predicted cases. Unfortunately, there is no available method to extract extensions from validation factory, so protected property should be read. // AppServiceProvider::boot Validator :: extend ( 'foo' , function ( $attribute , $value , $parameters , $validator ) { return $value == 'foo' ; }); // AppServiceProviderTest public function test_validator_foo_rule () { // Extract extensions from validation factory. $v = $this -> app [ 'validator' ]; $r = new ReflectionClass ( $v ); $p = $r -> getProperty ( 'extensions' ); $p -> setAccessible ( true ); $extensions = $p -> getValue ( $v ); // Check if extension had been registered properly. $this -> assertArrayHasKey ( 'foo' , $extensions ); $rule = $extensions [ 'foo' ]; // Test cases for extension. $this -> assertTrue ( $rule ( 'attr' , 'foo' )); $this -> assertFalse ( $rule ( 'attr' , 'bar' )); } Class-based rules (Laravel 5.5) can be simply tested as regular classes with basic rules for code coverage.","title":"Testing Validation Rules."},{"location":"en/Unit/Validation/#testing-validation-rules","text":"There are 2 approaches for testing validation rules: 1. Check if necessary rules has been set 2. Check if invalid data cannot pass validation While first is very simple and does not require any complicated test cases, the second might need a lot of data to test. It is highly recommended to provide new test cases for every appearance of invalid data during user testing or production use.","title":"Testing Validation Rules."},{"location":"en/Unit/Validation/#guide","text":"","title":"Guide"},{"location":"en/Unit/Validation/#testing-validation-rules_1","text":"Validation rules are set in 2 common ways: various use inside app logic (via controller validate() method, Validator facade, etc.) or via form requests. First case must be tested via mocking validator instance and running test on the class which contains logic. public function test_store_method () { $c = new Controller (); $v = m :: mock ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); // Substitute Validator instance in DI container. $previous = $this -> app -> make ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); $this -> app -> bind ( \\Illuminate\\Contracts\\Validation\\Factory :: class , $v ); $r = new Request (); $request -> headers -> set ( 'content-type' , 'application/json' ); $data = [ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , ]; $request -> setJson ( new ParameterBag ( $data )); $v -> expects ( 'make' ) -> once () -> with ( $data , [ 'name' => 'required' , 'email' => 'required|email' , ], m :: any (), m :: any ()) -> andReturnUsing ( function ( ... $args ) { return $previous -> make ( ... $args ); }); $c -> store ( $request ); // Additional assertions. } In case of form requests it can be done much simpler: public function test_it_contains_valid_rules () { $r = new StoreRequest (); $this -> assertEquals ([ 'name' => 'required' , 'email' => 'required|email' , ], $r -> rules ()); }","title":"Testing validation rules"},{"location":"en/Unit/Validation/#testing-abnormal-data","text":"It is impossible to predict all cases of abnormal data, however when such cases appear, tests must be extended. Abnormal data is detected during application use. Implement test case for controller or other instance with abnormal data to emulate failure. Implement fix and provide test case with expected interruption.","title":"Testing abnormal data"},{"location":"en/Unit/Validation/#testing-custom-validation-rules","text":"If your application contains custom validations, you must include test cases for such rules in a separate test case. These tests are required not to check user input, but to test validation logic itself and be sure that it fails or passes in predicted cases. Unfortunately, there is no available method to extract extensions from validation factory, so protected property should be read. // AppServiceProvider::boot Validator :: extend ( 'foo' , function ( $attribute , $value , $parameters , $validator ) { return $value == 'foo' ; }); // AppServiceProviderTest public function test_validator_foo_rule () { // Extract extensions from validation factory. $v = $this -> app [ 'validator' ]; $r = new ReflectionClass ( $v ); $p = $r -> getProperty ( 'extensions' ); $p -> setAccessible ( true ); $extensions = $p -> getValue ( $v ); // Check if extension had been registered properly. $this -> assertArrayHasKey ( 'foo' , $extensions ); $rule = $extensions [ 'foo' ]; // Test cases for extension. $this -> assertTrue ( $rule ( 'attr' , 'foo' )); $this -> assertFalse ( $rule ( 'attr' , 'bar' )); } Class-based rules (Laravel 5.5) can be simply tested as regular classes with basic rules for code coverage.","title":"Testing custom validation rules"},{"location":"vn/Conventions/","text":"Laravel Testing Conventions \u00b6 C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c \u00b6 T\u1ea5t c\u1ea3 Unit Tests PH\u1ea2I \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit T\u1ea5t c\u1ea3 Integration Tests PH\u1ea2I \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Feature N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit hay Feature PH\u1ea2I c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php PH\u1ea2I \u0111\u01b0\u1ee3c vi\u1ebft b\u00ean trong file tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean \u00b6 To\u00e0n b\u1ed9 test file PH\u1ea2I c\u00f3 namespace ri\u00eang. Namespace PH\u1ea2I \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (ho\u1eb7c ASampleProjectTests\\ ), v\u00e0 ti\u1ebfp \u0111\u00f3 l\u00e0 c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c. V\u00ed d\u1ee5, namespace cho file tests\\Unit\\Models\\UserTest.php PH\u1ea2I l\u00e0 Tests\\Unit\\Models\\UserTest (ho\u1eb7c ASampleProjectTests\\Unit\\Models\\UserTest ) \u0110\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh d\u1ec5 \u0111\u1ecdc, n\u00ean s\u1eed d\u1ee5ng snake_case khi vi\u1ebft t\u00ean cho c\u00e1c h\u00e0m test. Do m\u1ed9t h\u00e0m test ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test , th\u1ebf n\u00ean sau \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 v\u1ec1 t\u00ean h\u00e0m: public function test_it_throws_an_exception_when_email_is_too_long() { } Nh\u1eefng h\u00e0m kh\u00f4ng l\u00e0m nhi\u1ec7m v\u1ee5 test c\u00f3 th\u1ec3 tu\u00e2n theo quy t\u1eafc \u0111\u1eb7t t\u00ean c\u1ee7a PSR-2, t\u1ee9c d\u00f9ng camelCase \u0111\u1ec3 \u0111\u1eb7t t\u00ean. Nh\u1eefng th\u00e0nh ph\u1ea7n c\u1ea7n vi\u1ebft Unit Test \u00b6 Controllers : v\u1edbi events handling \u0111\u01b0\u1ee3c disable. To\u00e0n b\u1ed9 c\u00e1c th\u00e0nh ph\u1ea7n b\u00ean ngo\u00e0i PH\u1ea2I \u0111\u01b0\u1ee3c mock. Requests (n\u1ebfu c\u00f3): Ki\u1ec3m tra validation Models : getters, setters, v\u00e0 nh\u1eefng ch\u1ee9c n\u0103ng kh\u00e1c Transformers / Presenters (n\u1ebfu c\u00f3): Ki\u1ec3m tra k\u1ebft qu\u1ea3 output cho nh\u1eefng d\u1eef li\u1ec7u kh\u00e1c nhau Repositories (n\u1ebfu c\u00f3): Ki\u1ec3m tra t\u1eebng h\u00e0m c\u00f3 t\u1ea1o ra \u0111\u00fang SQL queries hay kh\u00f4ng, hay c\u00f3 c\u00e1c l\u1eddi g\u1ecdi h\u00e0m, \u0111\u1ebfn mocked query builder, \u0111\u00fang hay kh\u00f4ng Event listeners Queue jobs Auth policies V\u00e0 c\u00e1c Class chuy\u00ean bi\u1ec7t kh\u00e1c trong project Nh\u1eefng th\u00e0nh ph\u1ea7n y\u00eau c\u1ea7u Integration Test \u00b6 Routes : Ki\u1ec3m tra \u0111\u1ea7u v\u00e0o, \u0111\u1ea7u ra v\u1edbi to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng Route authentication Code Coverage \u00b6 Code Coverage cho to\u00e0n b\u1ed9 project n\u00ean \u0111\u1ea1t tr\u00ean 80%","title":"Laravel Testing Conventions"},{"location":"vn/Conventions/#laravel-testing-conventions","text":"","title":"Laravel Testing Conventions"},{"location":"vn/Conventions/#cau-truc-thu-muc","text":"T\u1ea5t c\u1ea3 Unit Tests PH\u1ea2I \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit T\u1ea5t c\u1ea3 Integration Tests PH\u1ea2I \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Feature N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit hay Feature PH\u1ea2I c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php PH\u1ea2I \u0111\u01b0\u1ee3c vi\u1ebft b\u00ean trong file tests/Unit/Models/UserTest.php","title":"C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c"},{"location":"vn/Conventions/#quy-tac-at-ten","text":"To\u00e0n b\u1ed9 test file PH\u1ea2I c\u00f3 namespace ri\u00eang. Namespace PH\u1ea2I \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u v\u1edbi Tests\\ (ho\u1eb7c ASampleProjectTests\\ ), v\u00e0 ti\u1ebfp \u0111\u00f3 l\u00e0 c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c. V\u00ed d\u1ee5, namespace cho file tests\\Unit\\Models\\UserTest.php PH\u1ea2I l\u00e0 Tests\\Unit\\Models\\UserTest (ho\u1eb7c ASampleProjectTests\\Unit\\Models\\UserTest ) \u0110\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh d\u1ec5 \u0111\u1ecdc, n\u00ean s\u1eed d\u1ee5ng snake_case khi vi\u1ebft t\u00ean cho c\u00e1c h\u00e0m test. Do m\u1ed9t h\u00e0m test ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test , th\u1ebf n\u00ean sau \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 v\u1ec1 t\u00ean h\u00e0m: public function test_it_throws_an_exception_when_email_is_too_long() { } Nh\u1eefng h\u00e0m kh\u00f4ng l\u00e0m nhi\u1ec7m v\u1ee5 test c\u00f3 th\u1ec3 tu\u00e2n theo quy t\u1eafc \u0111\u1eb7t t\u00ean c\u1ee7a PSR-2, t\u1ee9c d\u00f9ng camelCase \u0111\u1ec3 \u0111\u1eb7t t\u00ean.","title":"Quy t\u1eafc \u0111\u1eb7t t\u00ean"},{"location":"vn/Conventions/#nhung-thanh-phan-can-viet-unit-test","text":"Controllers : v\u1edbi events handling \u0111\u01b0\u1ee3c disable. To\u00e0n b\u1ed9 c\u00e1c th\u00e0nh ph\u1ea7n b\u00ean ngo\u00e0i PH\u1ea2I \u0111\u01b0\u1ee3c mock. Requests (n\u1ebfu c\u00f3): Ki\u1ec3m tra validation Models : getters, setters, v\u00e0 nh\u1eefng ch\u1ee9c n\u0103ng kh\u00e1c Transformers / Presenters (n\u1ebfu c\u00f3): Ki\u1ec3m tra k\u1ebft qu\u1ea3 output cho nh\u1eefng d\u1eef li\u1ec7u kh\u00e1c nhau Repositories (n\u1ebfu c\u00f3): Ki\u1ec3m tra t\u1eebng h\u00e0m c\u00f3 t\u1ea1o ra \u0111\u00fang SQL queries hay kh\u00f4ng, hay c\u00f3 c\u00e1c l\u1eddi g\u1ecdi h\u00e0m, \u0111\u1ebfn mocked query builder, \u0111\u00fang hay kh\u00f4ng Event listeners Queue jobs Auth policies V\u00e0 c\u00e1c Class chuy\u00ean bi\u1ec7t kh\u00e1c trong project","title":"Nh\u1eefng th\u00e0nh ph\u1ea7n c\u1ea7n vi\u1ebft Unit Test"},{"location":"vn/Conventions/#nhung-thanh-phan-yeu-cau-integration-test","text":"Routes : Ki\u1ec3m tra \u0111\u1ea7u v\u00e0o, \u0111\u1ea7u ra v\u1edbi to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng Route authentication","title":"Nh\u1eefng th\u00e0nh ph\u1ea7n y\u00eau c\u1ea7u Integration Test"},{"location":"vn/Conventions/#code-coverage","text":"Code Coverage cho to\u00e0n b\u1ed9 project n\u00ean \u0111\u1ea1t tr\u00ean 80%","title":"Code Coverage"},{"location":"vn/Introduction/","text":"Gi\u1edbi thi\u1ec7u v\u1ec1 Laravel Testing \u00b6 Test Case \u00b6 Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ... Unit Test \u00b6 Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u0111\u1ec3 ki\u1ec3m tra xem ch\u00fang c\u00f3 \u0111\u1ea3m b\u1ea3o ch\u1ea5t l\u01b0\u1ee3ng \u0111\u1ec3 s\u1eed d\u1ee5ng kh\u00f4ng. \u1ede trong Laravel Project, vi\u1ebft Unit Test l\u00e0 qu\u00e1 tr\u00ecnh m\u00e0 \u1edf \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c Test Case cho t\u1eebng function/method ri\u00eang bi\u1ec7t \u0111\u01b0\u1ee3c vi\u1ebft. Unit Test c\u1ea7n \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ki\u1ec3m tra function m\u1ed9t c\u00e1ch \u0111\u1ed9c l\u1eadp . Hay n\u00f3i c\u00e1ch kh\u00e1c: A c\u1ea7n B \u0111\u1ec3 ch\u1ea1y. Ngay c\u1ea3 khi B c\u00f3 l\u1ed7i, th\u00ec Unit Test c\u1ee7a A V\u1eaaN S\u1ebc PASS n\u1ebfu kh\u00f4ng c\u00f3 v\u1ea5n \u0111\u1ec1 g\u00ec v\u1edbi A M\u1ed9t Unit Test t\u1ed1t KH\u00d4NG N\u00caN th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c nh\u01b0 sau: Trigger \u0111\u1ec3 ch\u1ea1y codes t\u1eeb nh\u1eefng functions kh\u00e1c trong project Truy v\u1ea5n v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u S\u1eed d\u1ee5ng file system Truy c\u1eadp m\u1ea1ng ... Integration Test \u00b6 Integration Testing l\u00e0 c\u00f4ng \u0111o\u1ea1n trong ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3, t\u1eebng \u0111\u01a1n v\u1ecb ph\u1ea7n m\u1ec1m ri\u00eang bi\u1ec7t \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p l\u1ea1i, v\u00e0 ki\u1ec3m tra nh\u01b0 m\u1ed9t kh\u1ed1i th\u1ed1ng nh\u1ea5t. N\u1ebfu nh\u01b0 Unit Test gi\u00fap ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng t\u1eebng function ri\u00eang bi\u1ec7t ho\u1ea1t \u0111\u1ed9ng ch\u00ednh x\u00e1c, th\u00ec Integration Test gi\u00fap ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng c\u00e1c th\u00e0nh ph\u1ea7n kh\u00e1c trong c\u1ee7a project s\u1ebd ho\u1ea1t \u0111\u1ed9ng ho\u00e0n h\u1ea3o khi ch\u00fang k\u1ebft h\u1ee3p v\u1edbi nhau trong th\u1ef1c t\u1ebf. PHPUnit \u00b6 PHPUnit l\u00e0 m\u1ed9t Testing Framework h\u01b0\u1edbng \u0111\u1ebfn l\u1eadp tr\u00ecnh vi\u00ean cho PHP. N\u00f3 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n c\u1ee7a ki\u1ebfn tr\u00fac xUnit d\u00e0nh cho Unit Testing Frameworks. C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o h\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t C\u00e0i \u0111\u1eb7t theo t\u1eebng project \u00b6 $ composer require --dev phpunit/phpunit PHPUnit \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p s\u1eb5n trong Laravel Laravel project. B\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u Test app c\u1ee7a m\u00ecnh b\u1eb1ng c\u00e2u l\u1ec7nh $ ./vendor/bin/phpunit C\u00e0i \u0111\u1eb7t v\u00e0 s\u1eed d\u1ee5ng theo t\u1eebng Project \u0111\u01b0\u1ee3c khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng, b\u1edfi b\u1ea1n c\u00f3 th\u1ec3 s\u1ebd c\u1ea7n nh\u1eefng version kh\u00e1c nhau c\u1ee7a PHPUnit trong nh\u1eefng project kh\u00e1c nhau. C\u00e0i \u0111\u1eb7t Global \u00b6 Th\u00f4ng qua download: $ wget https://phar.phpunit.de/phpunit.phar $ chmod +x phpunit.phar $ sudo mv phpunit.phar /usr/local/bin/phpunit Th\u00f4ng qua composer: $ composer global require phpunit/phpunit H\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng b\u1ea1n c\u00f3 /home/<user>/.composer/vendor/bin ho\u1eb7c c:\\Users<user>\\AppData\\Roaming\\Composer\\vendor\\bin \u0111\u01b0\u1ee3c add v\u00e0o trong bi\u1ebfn PATH c\u1ee7a b\u1ea1n. Sau \u0111\u00f3, b\u1ea1n s\u1ebd c\u00f3 th\u1ec3 ch\u1ea1y b\u1ea3n PHPUnit \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t global \u1edf b\u1ea5t c\u1ee9 n\u01a1i \u0111\u00e2u: $ phpunit Code Coverage \u00b6 Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test. - Code Coverage c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1eb1ng PHPUnit v\u1edbi extension with Xdebug \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t. B\u1edfi v\u1eady, h\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng b\u1ea1n \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0 b\u1eadt Xdebug l\u00ean. Tham kh\u1ea3o Xdebug Installation Guide - B\u1ea1n c\u00f3 th\u1ec3 ch\u1ea1y PHPUnit \u0111\u1ec3 t\u1ea1o coverage report \u1edf \u0111\u1ecbnh \u0111\u1ea1ng HTML theo c\u00e2u l\u1ec7nh sau: phpunit --coverage-html <dir> // Ho\u1eb7c t\u1ea1o report v\u1edbi \u0111\u1ecbnh d\u1ea1ng Clover XML format. phpunit --coverage-clover <file> - Code Coverage th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 r\u1ea5t h\u1eefu \u00edch \u0111\u1ec3 t\u00ecm ki\u1ebfm nh\u1eefng th\u00e0nh ph\u1ea7n ch\u01b0a \u0111\u01b0\u1ee3c tests trong project c\u1ee7a b\u1ea1n. Tuy nhi\u00ean, n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t con s\u1ed1 v\u1ea1n n\u0103ng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ea3m b\u1ea3o cho ch\u1ea5t l\u01b0\u1ee3ng Tests c\u1ee7a b\u1ea1n. T\u00e0i li\u1ec7u tham kh\u1ea3o th\u00eam \u00b6 PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 Laravel Testing"},{"location":"vn/Introduction/#gioi-thieu-ve-laravel-testing","text":"","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 Laravel Testing"},{"location":"vn/Introduction/#test-case","text":"Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ...","title":"Test Case"},{"location":"vn/Introduction/#unit-test","text":"Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u0111\u1ec3 ki\u1ec3m tra xem ch\u00fang c\u00f3 \u0111\u1ea3m b\u1ea3o ch\u1ea5t l\u01b0\u1ee3ng \u0111\u1ec3 s\u1eed d\u1ee5ng kh\u00f4ng. \u1ede trong Laravel Project, vi\u1ebft Unit Test l\u00e0 qu\u00e1 tr\u00ecnh m\u00e0 \u1edf \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c Test Case cho t\u1eebng function/method ri\u00eang bi\u1ec7t \u0111\u01b0\u1ee3c vi\u1ebft. Unit Test c\u1ea7n \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ki\u1ec3m tra function m\u1ed9t c\u00e1ch \u0111\u1ed9c l\u1eadp . Hay n\u00f3i c\u00e1ch kh\u00e1c: A c\u1ea7n B \u0111\u1ec3 ch\u1ea1y. Ngay c\u1ea3 khi B c\u00f3 l\u1ed7i, th\u00ec Unit Test c\u1ee7a A V\u1eaaN S\u1ebc PASS n\u1ebfu kh\u00f4ng c\u00f3 v\u1ea5n \u0111\u1ec1 g\u00ec v\u1edbi A M\u1ed9t Unit Test t\u1ed1t KH\u00d4NG N\u00caN th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c nh\u01b0 sau: Trigger \u0111\u1ec3 ch\u1ea1y codes t\u1eeb nh\u1eefng functions kh\u00e1c trong project Truy v\u1ea5n v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u S\u1eed d\u1ee5ng file system Truy c\u1eadp m\u1ea1ng ...","title":"Unit Test"},{"location":"vn/Introduction/#integration-test","text":"Integration Testing l\u00e0 c\u00f4ng \u0111o\u1ea1n trong ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3, t\u1eebng \u0111\u01a1n v\u1ecb ph\u1ea7n m\u1ec1m ri\u00eang bi\u1ec7t \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p l\u1ea1i, v\u00e0 ki\u1ec3m tra nh\u01b0 m\u1ed9t kh\u1ed1i th\u1ed1ng nh\u1ea5t. N\u1ebfu nh\u01b0 Unit Test gi\u00fap ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng t\u1eebng function ri\u00eang bi\u1ec7t ho\u1ea1t \u0111\u1ed9ng ch\u00ednh x\u00e1c, th\u00ec Integration Test gi\u00fap ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng c\u00e1c th\u00e0nh ph\u1ea7n kh\u00e1c trong c\u1ee7a project s\u1ebd ho\u1ea1t \u0111\u1ed9ng ho\u00e0n h\u1ea3o khi ch\u00fang k\u1ebft h\u1ee3p v\u1edbi nhau trong th\u1ef1c t\u1ebf.","title":"Integration Test"},{"location":"vn/Introduction/#phpunit","text":"PHPUnit l\u00e0 m\u1ed9t Testing Framework h\u01b0\u1edbng \u0111\u1ebfn l\u1eadp tr\u00ecnh vi\u00ean cho PHP. N\u00f3 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n c\u1ee7a ki\u1ebfn tr\u00fac xUnit d\u00e0nh cho Unit Testing Frameworks. C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o h\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t","title":"PHPUnit"},{"location":"vn/Introduction/#cai-at-theo-tung-project","text":"$ composer require --dev phpunit/phpunit PHPUnit \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p s\u1eb5n trong Laravel Laravel project. B\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u Test app c\u1ee7a m\u00ecnh b\u1eb1ng c\u00e2u l\u1ec7nh $ ./vendor/bin/phpunit C\u00e0i \u0111\u1eb7t v\u00e0 s\u1eed d\u1ee5ng theo t\u1eebng Project \u0111\u01b0\u1ee3c khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng, b\u1edfi b\u1ea1n c\u00f3 th\u1ec3 s\u1ebd c\u1ea7n nh\u1eefng version kh\u00e1c nhau c\u1ee7a PHPUnit trong nh\u1eefng project kh\u00e1c nhau.","title":"C\u00e0i \u0111\u1eb7t theo t\u1eebng project"},{"location":"vn/Introduction/#cai-at-global","text":"Th\u00f4ng qua download: $ wget https://phar.phpunit.de/phpunit.phar $ chmod +x phpunit.phar $ sudo mv phpunit.phar /usr/local/bin/phpunit Th\u00f4ng qua composer: $ composer global require phpunit/phpunit H\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng b\u1ea1n c\u00f3 /home/<user>/.composer/vendor/bin ho\u1eb7c c:\\Users<user>\\AppData\\Roaming\\Composer\\vendor\\bin \u0111\u01b0\u1ee3c add v\u00e0o trong bi\u1ebfn PATH c\u1ee7a b\u1ea1n. Sau \u0111\u00f3, b\u1ea1n s\u1ebd c\u00f3 th\u1ec3 ch\u1ea1y b\u1ea3n PHPUnit \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t global \u1edf b\u1ea5t c\u1ee9 n\u01a1i \u0111\u00e2u: $ phpunit","title":"C\u00e0i \u0111\u1eb7t Global"},{"location":"vn/Introduction/#code-coverage","text":"Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test. - Code Coverage c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1eb1ng PHPUnit v\u1edbi extension with Xdebug \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t. B\u1edfi v\u1eady, h\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng b\u1ea1n \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0 b\u1eadt Xdebug l\u00ean. Tham kh\u1ea3o Xdebug Installation Guide - B\u1ea1n c\u00f3 th\u1ec3 ch\u1ea1y PHPUnit \u0111\u1ec3 t\u1ea1o coverage report \u1edf \u0111\u1ecbnh \u0111\u1ea1ng HTML theo c\u00e2u l\u1ec7nh sau: phpunit --coverage-html <dir> // Ho\u1eb7c t\u1ea1o report v\u1edbi \u0111\u1ecbnh d\u1ea1ng Clover XML format. phpunit --coverage-clover <file> - Code Coverage th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 r\u1ea5t h\u1eefu \u00edch \u0111\u1ec3 t\u00ecm ki\u1ebfm nh\u1eefng th\u00e0nh ph\u1ea7n ch\u01b0a \u0111\u01b0\u1ee3c tests trong project c\u1ee7a b\u1ea1n. Tuy nhi\u00ean, n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t con s\u1ed1 v\u1ea1n n\u0103ng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ea3m b\u1ea3o cho ch\u1ea5t l\u01b0\u1ee3ng Tests c\u1ee7a b\u1ea1n.","title":"Code Coverage"},{"location":"vn/Introduction/#tai-lieu-tham-khao-them","text":"PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing","title":"T\u00e0i li\u1ec7u tham kh\u1ea3o th\u00eam"},{"location":"vn/Knowledge/","text":"Knowledge about Unit Testing \u00b6 Classify \u00b6 Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau: Normal cases public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Test Doubles \u00b6 M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler Dummies \u00b6 Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter. Fake \u00b6 Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database) Stubs \u00b6 Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test. Mocks \u00b6 Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c. Stubs vs Mocks \u00b6 Stub gi\u00fap ch\u00fang ta ch\u1ea1y test. Mock l\u00e0 object th\u1ef1c hi\u1ec7n test. M\u1ed9t Fake m\u00e0 b\u1ea1n d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra l\u1eddi g\u1ecdi h\u00e0m th\u00ec l\u00e0 Mock. N\u1ebfu kh\u00f4ng n\u00f3 l\u00e0 Stub. Stub kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 l\u00e0m cho test fail. Mock th\u00ec c\u00f3 th\u1ec3. Examples \u00b6 D\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1c PHP Mocking Frameworks m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u1ea1o ra Mocks ph\u1ee5c v\u1ee5 vi\u1ec7c test: Mockery: \u0110\u01b0\u1ee3c khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng. \u0110\u00e3 \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p ngay trong Laravel Project. Tham kh\u1ea3o t\u00e0i li\u1ec7u \u1edf \u0111\u00e2y Prophecy: M\u1ed9t ph\u1ea7n c\u1ee7a PHPSpec project, nh\u01b0ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ed9c l\u1eadp b\u00ean ngo\u00e0i PHPSpec. Xem th\u00eam t\u1ea1i \u0111\u00e2y V\u00ed d\u1ee5 v\u1ec1 vi\u1ec7c t\u1ea1o Stubs v\u00e0 Mocks v\u1edbi Mockery // TODO","title":"Knowledge about Unit Testing"},{"location":"vn/Knowledge/#knowledge-about-unit-testing","text":"","title":"Knowledge about Unit Testing"},{"location":"vn/Knowledge/#classify","text":"Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau: Normal cases public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Classify"},{"location":"vn/Knowledge/#test-doubles","text":"M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler","title":"Test Doubles"},{"location":"vn/Knowledge/#dummies","text":"Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter.","title":"Dummies"},{"location":"vn/Knowledge/#fake","text":"Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database)","title":"Fake"},{"location":"vn/Knowledge/#stubs","text":"Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test.","title":"Stubs"},{"location":"vn/Knowledge/#mocks","text":"Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c.","title":"Mocks"},{"location":"vn/Knowledge/#stubs-vs-mocks","text":"Stub gi\u00fap ch\u00fang ta ch\u1ea1y test. Mock l\u00e0 object th\u1ef1c hi\u1ec7n test. M\u1ed9t Fake m\u00e0 b\u1ea1n d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra l\u1eddi g\u1ecdi h\u00e0m th\u00ec l\u00e0 Mock. N\u1ebfu kh\u00f4ng n\u00f3 l\u00e0 Stub. Stub kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 l\u00e0m cho test fail. Mock th\u00ec c\u00f3 th\u1ec3.","title":"Stubs vs Mocks"},{"location":"vn/Knowledge/#examples","text":"D\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1c PHP Mocking Frameworks m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u1ea1o ra Mocks ph\u1ee5c v\u1ee5 vi\u1ec7c test: Mockery: \u0110\u01b0\u1ee3c khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng. \u0110\u00e3 \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p ngay trong Laravel Project. Tham kh\u1ea3o t\u00e0i li\u1ec7u \u1edf \u0111\u00e2y Prophecy: M\u1ed9t ph\u1ea7n c\u1ee7a PHPSpec project, nh\u01b0ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ed9c l\u1eadp b\u00ean ngo\u00e0i PHPSpec. Xem th\u00eam t\u1ea1i \u0111\u00e2y V\u00ed d\u1ee5 v\u1ec1 vi\u1ec7c t\u1ea1o Stubs v\u00e0 Mocks v\u1edbi Mockery // TODO","title":"Examples"},{"location":"vn/Integration/Integration/","text":"Integration Tests \u00b6 M\u1ee5c \u0111\u00edch c\u1ee7a Integration Test l\u00e0 \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c components l\u00e0m vi\u1ec7c v\u1edbi nhau nh\u01b0 ta mong mu\u1ed1n. Khi th\u1ef1c hi\u1ec7n ki\u1ec3u test n\u00e0y, h\u00e3y nh\u1edb r\u1eb1ng nh\u1eefng thay \u0111\u1ed5i v\u1edbi data storage hay nh\u1eefng thao t\u00e1c v\u1edbi c\u00e1c service b\u00ean ngo\u00e0i l\u00e0 c\u00f3 th\u1ec3 x\u1ea3y ra. \u0110\u1ec3 c\u00f3 th\u1ec3 gi\u1ea3i quy\u1ebft m\u1ed9t c\u00e1ch \u0111\u00fang \u0111\u1eafn nh\u1eefng t\u00ecnh hu\u1ed1ng nh\u01b0 v\u1eady, c\u00f3 th\u1ec3 b\u1ea1n v\u1eabn c\u1ea7n ph\u1ea3i t\u1ea1o c\u00e1c Test Doubles cho m\u1ed9t v\u00e0i class. Vi\u1ec7c nh\u1eefng Class n\u00e0o c\u1ea7n \u0111\u1ebfn Test Doubles th\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1ch ti\u1ebfp c\u1eadn c\u1ee7a t\u1eebng team, v\u00e0 c\u00f3 th\u1ec3 kh\u00e1c bi\u1ec7t ph\u1ee5 thu\u1ed9c v\u00e0o \u0111\u1ed9 l\u1edbn c\u1ee7a application. Guide \u00b6 Laravel cung c\u1ea5p cho ch\u00fang ta 2 c\u00e1ch \u0111\u1ec3 th\u1ef1c hi\u1ec7n Integration Test: t\u1ea1o HTTP requests \u0111\u1ebfn routes, v\u00e0 browser-based testing v\u1edbi laravel\\dusk package. Vi\u1ec7c vi\u1ebft HTTP test l\u00e0 C\u1ea6N THI\u1ebeT, trong khi browser test th\u00ec kh\u00f4ng c\u00f3 y\u00eau c\u1ea7u c\u1ee5 th\u1ec3. Integration test PH\u1ea2I cover \u0111\u01b0\u1ee3c TO\u00c0N B\u1ed8 route c\u1ee7a application, v\u00e0 ph\u1ea3i tu\u00e2n th\u1ee7 c\u00e1c m\u1ee5c \u0111\u00edch sau: HTTP - Authentication v\u00e0 Policy tests. M\u1ed7i test case c\u1ea7n c\u00f3 nh\u1eefng test assertion ri\u00eang bi\u1ec7t. - Ki\u1ec3m tra Status Codes cho t\u1eebng lo\u1ea1i response. - Ki\u1ec3m tra Redirect Codes v\u00e0 Paths cho c\u00e1c c\u00e1c s\u1ef1 ki\u1ec7n kh\u00e1c nhau. - Ki\u1ec3m tra t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a JSON responses. - Ki\u1ec3m tra Error Handlers cho c\u00e1c response. - Ki\u1ec3m tra t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a API versions (n\u1ebfu c\u1ea7n thi\u1ebft). Database - \u0110\u1ea3m b\u1ea3o data \u0111\u01b0\u1ee3c ghi v\u00e0o database m\u1ed9t c\u00e1ch \u0111\u00fang \u0111\u1eafn trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd requests. - Ki\u1ec3m tra qu\u00e1 tr\u00ecnh migration. - Ki\u1ec3m tra vi\u1ec7c insert d\u1eef li\u1ec7u kh\u00f4ng b\u00ecnh th\u01b0\u1eddng th\u00ec c\u00f3 \u0111\u01b0\u1ee3c x\u1eed l\u00fd ch\u00ednh x\u00e1c hay kh\u00f4ng. N\u1ebfu application c\u1ee7a b\u1ea1n c\u00f3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nh\u1eefng services hay servers b\u00ean ngo\u00e0i, th\u00ec b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng phi\u00ean b\u1ea3n Staging c\u1ee7a nh\u1eefng services \u0111\u00f3, ho\u1eb7c mock class Client c\u1ee7a b\u1ea1n. Testing environment c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi nh\u1eefng config v\u00e0 bi\u1ebfn \u0111\u1eb7c bi\u1ec7t. Ch\u1eb7ng h\u1ea1n nh\u01b0 \u1edf testing database connection ta c\u00f3 th\u1ec3 t\u1ea1o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng l\u00e0 DB_TEST_DATABASE . Tuy nhi\u00ean, ta n\u00ean l\u00e0m theo c\u00e1ch l\u00e0 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn production \u1edf b\u00ean trong file phpunit.xml ho\u1eb7c trong config CI. S\u1ebd l\u00e0 t\u1ed1t h\u01a1n n\u1ebfu ph\u1ea7n tests c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ch\u1ea1y hai l\u1ea7n, v\u1edbi APP_ENV \u0111\u01b0\u1ee3c \u0111\u1eb7t gi\u00e1 tr\u1ecb l\u1ea7n l\u01b0\u1ee3t l\u00e0 testing v\u00e0 production . <php> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"CACHE_DRIVER\" value= \"array\" /> <env name= \"SESSION_DRIVER\" value= \"array\" /> <env name= \"QUEUE_DRIVER\" value= \"sync\" /> <env name= \"DB_HOST\" value= \"test.database.local\" /> <env name= \"DB_USERNAME\" value= \"testing\" /> <env name= \"DB_PASSWORD\" value= \"secret\" /> </php>","title":"Integration Tests"},{"location":"vn/Integration/Integration/#integration-tests","text":"M\u1ee5c \u0111\u00edch c\u1ee7a Integration Test l\u00e0 \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c components l\u00e0m vi\u1ec7c v\u1edbi nhau nh\u01b0 ta mong mu\u1ed1n. Khi th\u1ef1c hi\u1ec7n ki\u1ec3u test n\u00e0y, h\u00e3y nh\u1edb r\u1eb1ng nh\u1eefng thay \u0111\u1ed5i v\u1edbi data storage hay nh\u1eefng thao t\u00e1c v\u1edbi c\u00e1c service b\u00ean ngo\u00e0i l\u00e0 c\u00f3 th\u1ec3 x\u1ea3y ra. \u0110\u1ec3 c\u00f3 th\u1ec3 gi\u1ea3i quy\u1ebft m\u1ed9t c\u00e1ch \u0111\u00fang \u0111\u1eafn nh\u1eefng t\u00ecnh hu\u1ed1ng nh\u01b0 v\u1eady, c\u00f3 th\u1ec3 b\u1ea1n v\u1eabn c\u1ea7n ph\u1ea3i t\u1ea1o c\u00e1c Test Doubles cho m\u1ed9t v\u00e0i class. Vi\u1ec7c nh\u1eefng Class n\u00e0o c\u1ea7n \u0111\u1ebfn Test Doubles th\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1ch ti\u1ebfp c\u1eadn c\u1ee7a t\u1eebng team, v\u00e0 c\u00f3 th\u1ec3 kh\u00e1c bi\u1ec7t ph\u1ee5 thu\u1ed9c v\u00e0o \u0111\u1ed9 l\u1edbn c\u1ee7a application.","title":"Integration Tests"},{"location":"vn/Integration/Integration/#guide","text":"Laravel cung c\u1ea5p cho ch\u00fang ta 2 c\u00e1ch \u0111\u1ec3 th\u1ef1c hi\u1ec7n Integration Test: t\u1ea1o HTTP requests \u0111\u1ebfn routes, v\u00e0 browser-based testing v\u1edbi laravel\\dusk package. Vi\u1ec7c vi\u1ebft HTTP test l\u00e0 C\u1ea6N THI\u1ebeT, trong khi browser test th\u00ec kh\u00f4ng c\u00f3 y\u00eau c\u1ea7u c\u1ee5 th\u1ec3. Integration test PH\u1ea2I cover \u0111\u01b0\u1ee3c TO\u00c0N B\u1ed8 route c\u1ee7a application, v\u00e0 ph\u1ea3i tu\u00e2n th\u1ee7 c\u00e1c m\u1ee5c \u0111\u00edch sau: HTTP - Authentication v\u00e0 Policy tests. M\u1ed7i test case c\u1ea7n c\u00f3 nh\u1eefng test assertion ri\u00eang bi\u1ec7t. - Ki\u1ec3m tra Status Codes cho t\u1eebng lo\u1ea1i response. - Ki\u1ec3m tra Redirect Codes v\u00e0 Paths cho c\u00e1c c\u00e1c s\u1ef1 ki\u1ec7n kh\u00e1c nhau. - Ki\u1ec3m tra t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a JSON responses. - Ki\u1ec3m tra Error Handlers cho c\u00e1c response. - Ki\u1ec3m tra t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a API versions (n\u1ebfu c\u1ea7n thi\u1ebft). Database - \u0110\u1ea3m b\u1ea3o data \u0111\u01b0\u1ee3c ghi v\u00e0o database m\u1ed9t c\u00e1ch \u0111\u00fang \u0111\u1eafn trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd requests. - Ki\u1ec3m tra qu\u00e1 tr\u00ecnh migration. - Ki\u1ec3m tra vi\u1ec7c insert d\u1eef li\u1ec7u kh\u00f4ng b\u00ecnh th\u01b0\u1eddng th\u00ec c\u00f3 \u0111\u01b0\u1ee3c x\u1eed l\u00fd ch\u00ednh x\u00e1c hay kh\u00f4ng. N\u1ebfu application c\u1ee7a b\u1ea1n c\u00f3 t\u01b0\u01a1ng t\u00e1c v\u1edbi nh\u1eefng services hay servers b\u00ean ngo\u00e0i, th\u00ec b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng phi\u00ean b\u1ea3n Staging c\u1ee7a nh\u1eefng services \u0111\u00f3, ho\u1eb7c mock class Client c\u1ee7a b\u1ea1n. Testing environment c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi nh\u1eefng config v\u00e0 bi\u1ebfn \u0111\u1eb7c bi\u1ec7t. Ch\u1eb7ng h\u1ea1n nh\u01b0 \u1edf testing database connection ta c\u00f3 th\u1ec3 t\u1ea1o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng l\u00e0 DB_TEST_DATABASE . Tuy nhi\u00ean, ta n\u00ean l\u00e0m theo c\u00e1ch l\u00e0 thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn production \u1edf b\u00ean trong file phpunit.xml ho\u1eb7c trong config CI. S\u1ebd l\u00e0 t\u1ed1t h\u01a1n n\u1ebfu ph\u1ea7n tests c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ch\u1ea1y hai l\u1ea7n, v\u1edbi APP_ENV \u0111\u01b0\u1ee3c \u0111\u1eb7t gi\u00e1 tr\u1ecb l\u1ea7n l\u01b0\u1ee3t l\u00e0 testing v\u00e0 production . <php> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"CACHE_DRIVER\" value= \"array\" /> <env name= \"SESSION_DRIVER\" value= \"array\" /> <env name= \"QUEUE_DRIVER\" value= \"sync\" /> <env name= \"DB_HOST\" value= \"test.database.local\" /> <env name= \"DB_USERNAME\" value= \"testing\" /> <env name= \"DB_PASSWORD\" value= \"secret\" /> </php>","title":"Guide"},{"location":"vn/Unit/Common/","text":"Common Testing Rules \u00b6 V\u1edbi nh\u1eefng th\u00e0nh ph\u1ea7n nh\u01b0 Events, Event Listeners, Subscribers, Queue Jobs v\u00e0 Validation Rule Classes, b\u1ea1n n\u00ean tu\u00e2n theo m\u1ed9t s\u1ed1 quy t\u1eafc c\u01a1 b\u1ea3n sau: Test __construct() method \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng c\u00e1c properties \u0111\u1ec1u \u0111\u01b0\u1ee3c assigned. Cover t\u1ea5t c\u1ea3 c\u00e1c public methods v\u1edbi nh\u1eefng tests c\u1ea7n thi\u1ebft. Th\u1eadt ch\u00fa \u00fd v\u00e0o main method c\u1ee7a class (e. g. handle \u0111\u1ed1i v\u1edbi Listeners ho\u1eb7c passes v\u1edbi rules). Coverage l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft \u0111\u1ed1i v\u1edbi nh\u1eefng methods m\u00e0 tr\u1ea3 v\u1ec1 text (v\u00ed d\u1ee5 nh\u01b0 message \u0111\u1ed1i v\u1edbi rules). Coverage l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi nh\u1eefng h\u00e0m get/set c\u01a1 b\u1ea3n, h\u00e0m m\u00e0 kh\u00f4ng ch\u1ec9nh s\u1eeda tham s\u1ed1 input. Mocking DI instances \u00b6 Laravel s\u1eed d\u1ee5ng injection trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p v\u00e0 components c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 th\u00f4ng qua method/constructor injection ho\u1eb7c tr\u1ef1c ti\u1ebfp trong methods th\u00f4ng qua container instance ho\u1eb7c Facades. Trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p nh\u01b0 v\u1eady, s\u1ebd l\u00e0 r\u1ea5t quan tr\u1ecdng \u0111\u1ec3 t\u1ea1o Test Doubles cho t\u1eebng injected instance v\u00e0 ch\u1eafc ch\u1eafn r\u1eb1ng kh\u00f4ng c\u00f3 instances n\u00e0o kh\u00e1c \u0111\u01b0\u1ee3c resolved. M\u1eb7c \u0111\u1ecbnh th\u00ec TestCase class \u0111\u01b0\u1ee3c cung c\u1ea5p v\u1edbi m\u1ed9t application instance \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o s\u1eb5n b\u1edfi Laravel. M\u1ecdi th\u1ee9 l\u00e0 t\u1ed1t n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y, tuy nhi\u00ean n\u00ean c\u00f3 th\u00eam m\u1ed9t class test case c\u01a1 b\u1ea3n v\u1edbi instance application \u0111\u01b0\u1ee3c mock. class MockApplicationTestCase extends TestCase { /** * Creates the application. * * @return \\Illuminate\\Foundation\\Application|\\Mockery\\Mock */ public function createApplication () { return m :: mock ( \\Illuminate\\Foundation\\Application :: class ) -> makePartial (); } } C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y s\u1ebd gi\u00fap b\u1ea1n ki\u1ec3m so\u00e1t t\u1ea5t c\u1ea3 c\u00e1c qu\u00e1 tr\u00ecnh Dependecies Injection m\u1ed9t c\u00e1ch c\u1ea9n th\u1eadn. V\u00e0 gi\u1edd b\u1ea1n c\u00f3 th\u1ec3 inject Test Doubles m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n. public function test_it_assignes_event_handler () { $e = m :: mock ( Dispatcher :: class ); $this -> app -> bind ( Dispatcher :: class , $e ); // Test event assignment with mocked class. } Testing Database Queries \u00b6 T\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t quan tr\u1ecdng cho test cases, v\u00e0 vi\u1ec7c ch\u1eafc ch\u1eafn r\u1eb1ng SQL queries \u0111\u01b0\u1ee3c sinh ra ch\u00ednh x\u00e1c l\u00e0 c\u1ef1c k\u1ef3 c\u1ea7n thi\u1ebft. T\u1ea5t c\u1ea3 c\u00e1c thao t\u00e1c v\u1edbi Database trong Laravel \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00f4ng qua class Illuminate\\Database\\Connection , v\u00e0 c\u00e1c methods c\u1ee7a n\u00f3 th\u00ec d\u1ec5 d\u00e0ng \u0111\u01b0\u1ee3c mock b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Mockery package. $connection = m :: mock ( Connection :: class ); $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); // DB::table is the most common call and it is simpler to mock the method manually instead of dealing with partial mocks. $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Test your queries $connection -> shouldReceive ( 'select' ) -> with ( 'select * from \"streets\" limit 10 offset 0' , // query [], // bindings m :: any () // useReadPdo. use true/false if necessary ) -> andReturn ([ // 'query result' ]); $someClass -> methodUsingConnection (); \u0110\u00f4i khi, s\u1ebd l\u00e0 r\u1ea5t ti\u1ec7n l\u1ee3i khi ta inject m\u1ed9t Connection \u0111\u00e3 \u0111\u01b0\u1ee3c mock v\u00e0o trong DI \u0111\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf m\u1ecdi n\u01a1i. \u1ede \u0111\u00e2y ta tr\u1ef1c ti\u1ebfp thay \u0111\u1ed5i property, b\u1edfi s\u1ef1 m\u1edf r\u1ed9ng m\u1eb7c \u0111\u1ecbnh th\u00ec y\u00eau c\u1ea7u mock connection methods, th\u1ee9 m\u00e0 ch\u00fang ta kh\u00f4ng c\u1ea7n. public function setUp () { $connection = m :: mock ( Connection :: class ); // Replace SQLiteGrammar and Processor if necessary. $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Replace current default connection (if necessary) $this -> afterApplicationCreated ( function () use ( $connection ) { $manager = $app [ 'db' ]; $name = $manager -> getDefaultConnection (); $manager -> purge ( $name ); $r = new ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $p -> setValue ( $manager , [ $name => $connection , ]) }); // Assign a separate \"mock\" connection $this -> afterApplicationCreated ( function () use ( $connection ) { $manager = $app [ 'db' ]; $manager -> setDefaultConnection ( 'mock' ); $r = new ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $list = $p -> getValue ( $manager ); $list [ 'mock' ] = $connection ; $p -> setValue ( $manager , $list ); }); parent :: setUp (); } B\u1ea1n c\u1ea7n ph\u1ea3i nh\u1edb tu\u00e2n theo nh\u1eefng th\u1ee9 sau khi th\u1ef1c hi\u1ec7n database testing - B\u1ea1n c\u00f3 th\u1ec3 c\u00f3 connection c\u00f3 t\u00ean (named connection), h\u00e3y c\u1ea9n th\u1eadn v\u1edbi n\u00f3. - Models l\u1ea5y ra connections th\u00f4ng qua ConnectionResolverInterface , th\u1ee9 \u0111\u01b0\u1ee3c t\u1ef1 g\u00e1n v\u00e0o trong model v\u00e0 c\u00f3 th\u1ec3 kh\u00e1c bi\u1ec7t. - Queries \u0111\u01b0\u1ee3c t\u1ea1o ra kh\u00e1c nhau v\u1edbi nh\u1eefng c\u00fa ph\u00e1p kh\u00e1c nhau (db kh\u00e1c nhau). H\u00e3y s\u1eed d\u1ee5ng c\u00e1i th\u00edch h\u1ee3p cho project c\u1ee7a b\u1ea1n.","title":"Common Testing Rules"},{"location":"vn/Unit/Common/#common-testing-rules","text":"V\u1edbi nh\u1eefng th\u00e0nh ph\u1ea7n nh\u01b0 Events, Event Listeners, Subscribers, Queue Jobs v\u00e0 Validation Rule Classes, b\u1ea1n n\u00ean tu\u00e2n theo m\u1ed9t s\u1ed1 quy t\u1eafc c\u01a1 b\u1ea3n sau: Test __construct() method \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng c\u00e1c properties \u0111\u1ec1u \u0111\u01b0\u1ee3c assigned. Cover t\u1ea5t c\u1ea3 c\u00e1c public methods v\u1edbi nh\u1eefng tests c\u1ea7n thi\u1ebft. Th\u1eadt ch\u00fa \u00fd v\u00e0o main method c\u1ee7a class (e. g. handle \u0111\u1ed1i v\u1edbi Listeners ho\u1eb7c passes v\u1edbi rules). Coverage l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft \u0111\u1ed1i v\u1edbi nh\u1eefng methods m\u00e0 tr\u1ea3 v\u1ec1 text (v\u00ed d\u1ee5 nh\u01b0 message \u0111\u1ed1i v\u1edbi rules). Coverage l\u00e0 kh\u00f4ng b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi nh\u1eefng h\u00e0m get/set c\u01a1 b\u1ea3n, h\u00e0m m\u00e0 kh\u00f4ng ch\u1ec9nh s\u1eeda tham s\u1ed1 input.","title":"Common Testing Rules"},{"location":"vn/Unit/Common/#mocking-di-instances","text":"Laravel s\u1eed d\u1ee5ng injection trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p v\u00e0 components c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 th\u00f4ng qua method/constructor injection ho\u1eb7c tr\u1ef1c ti\u1ebfp trong methods th\u00f4ng qua container instance ho\u1eb7c Facades. Trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p nh\u01b0 v\u1eady, s\u1ebd l\u00e0 r\u1ea5t quan tr\u1ecdng \u0111\u1ec3 t\u1ea1o Test Doubles cho t\u1eebng injected instance v\u00e0 ch\u1eafc ch\u1eafn r\u1eb1ng kh\u00f4ng c\u00f3 instances n\u00e0o kh\u00e1c \u0111\u01b0\u1ee3c resolved. M\u1eb7c \u0111\u1ecbnh th\u00ec TestCase class \u0111\u01b0\u1ee3c cung c\u1ea5p v\u1edbi m\u1ed9t application instance \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o s\u1eb5n b\u1edfi Laravel. M\u1ecdi th\u1ee9 l\u00e0 t\u1ed1t n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y, tuy nhi\u00ean n\u00ean c\u00f3 th\u00eam m\u1ed9t class test case c\u01a1 b\u1ea3n v\u1edbi instance application \u0111\u01b0\u1ee3c mock. class MockApplicationTestCase extends TestCase { /** * Creates the application. * * @return \\Illuminate\\Foundation\\Application|\\Mockery\\Mock */ public function createApplication () { return m :: mock ( \\Illuminate\\Foundation\\Application :: class ) -> makePartial (); } } C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y s\u1ebd gi\u00fap b\u1ea1n ki\u1ec3m so\u00e1t t\u1ea5t c\u1ea3 c\u00e1c qu\u00e1 tr\u00ecnh Dependecies Injection m\u1ed9t c\u00e1ch c\u1ea9n th\u1eadn. V\u00e0 gi\u1edd b\u1ea1n c\u00f3 th\u1ec3 inject Test Doubles m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n. public function test_it_assignes_event_handler () { $e = m :: mock ( Dispatcher :: class ); $this -> app -> bind ( Dispatcher :: class , $e ); // Test event assignment with mocked class. }","title":"Mocking DI instances"},{"location":"vn/Unit/Common/#testing-database-queries","text":"T\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t quan tr\u1ecdng cho test cases, v\u00e0 vi\u1ec7c ch\u1eafc ch\u1eafn r\u1eb1ng SQL queries \u0111\u01b0\u1ee3c sinh ra ch\u00ednh x\u00e1c l\u00e0 c\u1ef1c k\u1ef3 c\u1ea7n thi\u1ebft. T\u1ea5t c\u1ea3 c\u00e1c thao t\u00e1c v\u1edbi Database trong Laravel \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00f4ng qua class Illuminate\\Database\\Connection , v\u00e0 c\u00e1c methods c\u1ee7a n\u00f3 th\u00ec d\u1ec5 d\u00e0ng \u0111\u01b0\u1ee3c mock b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Mockery package. $connection = m :: mock ( Connection :: class ); $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); // DB::table is the most common call and it is simpler to mock the method manually instead of dealing with partial mocks. $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Test your queries $connection -> shouldReceive ( 'select' ) -> with ( 'select * from \"streets\" limit 10 offset 0' , // query [], // bindings m :: any () // useReadPdo. use true/false if necessary ) -> andReturn ([ // 'query result' ]); $someClass -> methodUsingConnection (); \u0110\u00f4i khi, s\u1ebd l\u00e0 r\u1ea5t ti\u1ec7n l\u1ee3i khi ta inject m\u1ed9t Connection \u0111\u00e3 \u0111\u01b0\u1ee3c mock v\u00e0o trong DI \u0111\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng n\u00f3 \u1edf m\u1ecdi n\u01a1i. \u1ede \u0111\u00e2y ta tr\u1ef1c ti\u1ebfp thay \u0111\u1ed5i property, b\u1edfi s\u1ef1 m\u1edf r\u1ed9ng m\u1eb7c \u0111\u1ecbnh th\u00ec y\u00eau c\u1ea7u mock connection methods, th\u1ee9 m\u00e0 ch\u00fang ta kh\u00f4ng c\u1ea7n. public function setUp () { $connection = m :: mock ( Connection :: class ); // Replace SQLiteGrammar and Processor if necessary. $query = new Builder ( $connection , new SQLiteGrammar (), new Processor ()); $connection -> allows () -> table () -> andReturnUsing ( function ( $table ) use ( $query ) { return $query -> from ( $table ); }) // Replace current default connection (if necessary) $this -> afterApplicationCreated ( function () use ( $connection ) { $manager = $app [ 'db' ]; $name = $manager -> getDefaultConnection (); $manager -> purge ( $name ); $r = new ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $p -> setValue ( $manager , [ $name => $connection , ]) }); // Assign a separate \"mock\" connection $this -> afterApplicationCreated ( function () use ( $connection ) { $manager = $app [ 'db' ]; $manager -> setDefaultConnection ( 'mock' ); $r = new ReflectionClass ( $manager ); $p = $r -> getProperty ( 'connections' ); $p -> setAccessible ( true ); $list = $p -> getValue ( $manager ); $list [ 'mock' ] = $connection ; $p -> setValue ( $manager , $list ); }); parent :: setUp (); } B\u1ea1n c\u1ea7n ph\u1ea3i nh\u1edb tu\u00e2n theo nh\u1eefng th\u1ee9 sau khi th\u1ef1c hi\u1ec7n database testing - B\u1ea1n c\u00f3 th\u1ec3 c\u00f3 connection c\u00f3 t\u00ean (named connection), h\u00e3y c\u1ea9n th\u1eadn v\u1edbi n\u00f3. - Models l\u1ea5y ra connections th\u00f4ng qua ConnectionResolverInterface , th\u1ee9 \u0111\u01b0\u1ee3c t\u1ef1 g\u00e1n v\u00e0o trong model v\u00e0 c\u00f3 th\u1ec3 kh\u00e1c bi\u1ec7t. - Queries \u0111\u01b0\u1ee3c t\u1ea1o ra kh\u00e1c nhau v\u1edbi nh\u1eefng c\u00fa ph\u00e1p kh\u00e1c nhau (db kh\u00e1c nhau). H\u00e3y s\u1eed d\u1ee5ng c\u00e1i th\u00edch h\u1ee3p cho project c\u1ee7a b\u1ea1n.","title":"Testing Database Queries"},{"location":"vn/Unit/Controllers/","text":"Testing Controllers \u00b6 Controllers ch\u1ee9a nh\u1eefng gi\u1ea3i thu\u1eadt ch\u00ednh cho v\u1ea5n \u0111\u1ec1 x\u1eed l\u00fd request. Ch\u00fang c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c ch\u00fa \u00fd nhi\u1ec1u trong qu\u00e1 tr\u00ecnh testing. Unit Tests vi\u1ebft cho controllers ph\u1ea3i \u0111\u01b0\u1ee3c c\u00f4 l\u1eadp ho\u00e0n to\u00e0n, v\u00e0 b\u1ea5t c\u1ee9 l\u1eddi g\u1ecdi ra b\u00ean ngo\u00e0i n\u00e0o t\u1eeb b\u00ean trong controller method ph\u1ea3i \u0111\u01b0\u1ee3c mock. Tu\u1ef3 v\u00e0o logic trong application c\u1ee7a b\u1ea1n, m\u00e0 controllers c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c Validation \u1edf ph\u1ea7n logic b\u00ean trong method hay th\u00f4ng qua Form Request. N\u1ebfu l\u00e0 tr\u01b0\u1eddng h\u1ee3p tr\u01b0\u1edbc, Controller Tests PH\u1ea2I bao g\u1ed3m c\u00e1c cases li\u00ean quan \u0111\u1ebfn boundary v\u00e0 abnormal request input. \u1ede tr\u01b0\u1eddng h\u1ee3p c\u00f2n l\u1ea1i, nh\u1eefng cases tr\u00ean ph\u1ea3i \u0111\u01b0\u1ee3c test trong Form Request test cases t\u01b0\u01a1ng \u1ee9ng. Tuy nhi\u00ean, \u0111i\u1ec1u n\u00e0y ch\u1ec9 \u00e1p d\u1ee5ng v\u1edbi input \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi user. Data \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi nh\u1eefng h\u00e0m b\u00ean ngo\u00e0i controller method ph\u1ea3i \u0111\u01b0\u1ee3c mock ch\u00ednh x\u00e1c v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c lo\u1ea1i data. Guide \u00b6 Examples \u00b6 Resource web controller and tests","title":"Testing Controllers"},{"location":"vn/Unit/Controllers/#testing-controllers","text":"Controllers ch\u1ee9a nh\u1eefng gi\u1ea3i thu\u1eadt ch\u00ednh cho v\u1ea5n \u0111\u1ec1 x\u1eed l\u00fd request. Ch\u00fang c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c ch\u00fa \u00fd nhi\u1ec1u trong qu\u00e1 tr\u00ecnh testing. Unit Tests vi\u1ebft cho controllers ph\u1ea3i \u0111\u01b0\u1ee3c c\u00f4 l\u1eadp ho\u00e0n to\u00e0n, v\u00e0 b\u1ea5t c\u1ee9 l\u1eddi g\u1ecdi ra b\u00ean ngo\u00e0i n\u00e0o t\u1eeb b\u00ean trong controller method ph\u1ea3i \u0111\u01b0\u1ee3c mock. Tu\u1ef3 v\u00e0o logic trong application c\u1ee7a b\u1ea1n, m\u00e0 controllers c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c Validation \u1edf ph\u1ea7n logic b\u00ean trong method hay th\u00f4ng qua Form Request. N\u1ebfu l\u00e0 tr\u01b0\u1eddng h\u1ee3p tr\u01b0\u1edbc, Controller Tests PH\u1ea2I bao g\u1ed3m c\u00e1c cases li\u00ean quan \u0111\u1ebfn boundary v\u00e0 abnormal request input. \u1ede tr\u01b0\u1eddng h\u1ee3p c\u00f2n l\u1ea1i, nh\u1eefng cases tr\u00ean ph\u1ea3i \u0111\u01b0\u1ee3c test trong Form Request test cases t\u01b0\u01a1ng \u1ee9ng. Tuy nhi\u00ean, \u0111i\u1ec1u n\u00e0y ch\u1ec9 \u00e1p d\u1ee5ng v\u1edbi input \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi user. Data \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi nh\u1eefng h\u00e0m b\u00ean ngo\u00e0i controller method ph\u1ea3i \u0111\u01b0\u1ee3c mock ch\u00ednh x\u00e1c v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c lo\u1ea1i data.","title":"Testing Controllers"},{"location":"vn/Unit/Controllers/#guide","text":"","title":"Guide"},{"location":"vn/Unit/Controllers/#examples","text":"Resource web controller and tests","title":"Examples"},{"location":"vn/Unit/Middleware/","text":"Testing Middleware Classes \u00b6 Middleware tests cases nh\u00ecn chung kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t nhi\u1ec1u v\u1edbi h\u1ea7u h\u1ebft c\u00e1c class kh\u00e1c. Ngo\u1ea1i tr\u1eeb vi\u1ec7c b\u1ea1n c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn $next callback. Guide \u00b6 B\u1ea1n n\u00ean nh\u1edb r\u1eb1ng middleware c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 data m\u00e0 kh\u00f4ng c\u1ea7n g\u1ecdi $next , v\u00e0 \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng mong mu\u1ed1n. Ta c\u00f3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p x\u1eed l\u00fd v\u1edbi middleware nh\u01b0 sau: Tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a $next closure: basic before middleware Tr\u1ea3 v\u1ec1 response m\u00e0 kh\u00f4ng g\u1ecdi $next : abortion middleware. Nh\u1eadn v\u1ec1 response t\u1eeb $next v\u00e0 th\u1ef1c hi\u1ec7n thay \u0111\u1ed5i tr\u00ean \u0111\u00f3: basic after middleware. D\u1ef1a tr\u00ean c\u00e1ch th\u1ef1c hi\u1ec7n c\u1ee7a b\u1ea1n m\u00e0 nh\u1eefng cases tr\u00ean c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng c\u00f9ng nhau. (v\u00ed d\u1ee5 nh\u01b0 conditional abortion ho\u1eb7c before/after execution). \u0110\u1ec3 mock $next callback, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u01a1n gi\u1ea3n l\u00e0 t\u1ea1o m\u1ed9t closure v\u1edbi c\u00e1c assertions \u1edf b\u00ean trong: public function test_middleware_appends_header () { //... $next = function ( $request ) { $this -> assertEquals ( 'Appended_header_data' , $request -> headers -> get ( 'header-name' )); return response ( 'ok' ); } $middleware -> handle ( $request , $next ); //... } \u0110\u00f4i khi middleware c\u1ea7n t\u01b0\u01a1ng t\u00e1c v\u1edbi Session, Cache ho\u1eb7c c\u00e1c components kh\u00e1c. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, b\u1ea1n c\u1ea7n mock nh\u1eefng components n\u00e0y m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t c\u1ea7n \u0111\u1ebfn ch\u1ec9nh s\u1eeda session, b\u1ea1n n\u00ean s\u1eed d\u1ee5ng $request->getSession() \u1edf b\u00ean trong method, thay v\u00ec d\u00f9ng Facades ho\u1eb7c Dependecy Injection. Examples \u00b6 Middlewares Middleware tests","title":"Testing Middleware Classes"},{"location":"vn/Unit/Middleware/#testing-middleware-classes","text":"Middleware tests cases nh\u00ecn chung kh\u00f4ng c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t nhi\u1ec1u v\u1edbi h\u1ea7u h\u1ebft c\u00e1c class kh\u00e1c. Ngo\u1ea1i tr\u1eeb vi\u1ec7c b\u1ea1n c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn $next callback.","title":"Testing Middleware Classes"},{"location":"vn/Unit/Middleware/#guide","text":"B\u1ea1n n\u00ean nh\u1edb r\u1eb1ng middleware c\u00f3 th\u1ec3 tr\u1ea3 v\u1ec1 data m\u00e0 kh\u00f4ng c\u1ea7n g\u1ecdi $next , v\u00e0 \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng mong mu\u1ed1n. Ta c\u00f3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p x\u1eed l\u00fd v\u1edbi middleware nh\u01b0 sau: Tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 c\u1ee7a $next closure: basic before middleware Tr\u1ea3 v\u1ec1 response m\u00e0 kh\u00f4ng g\u1ecdi $next : abortion middleware. Nh\u1eadn v\u1ec1 response t\u1eeb $next v\u00e0 th\u1ef1c hi\u1ec7n thay \u0111\u1ed5i tr\u00ean \u0111\u00f3: basic after middleware. D\u1ef1a tr\u00ean c\u00e1ch th\u1ef1c hi\u1ec7n c\u1ee7a b\u1ea1n m\u00e0 nh\u1eefng cases tr\u00ean c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng c\u00f9ng nhau. (v\u00ed d\u1ee5 nh\u01b0 conditional abortion ho\u1eb7c before/after execution). \u0110\u1ec3 mock $next callback, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u01a1n gi\u1ea3n l\u00e0 t\u1ea1o m\u1ed9t closure v\u1edbi c\u00e1c assertions \u1edf b\u00ean trong: public function test_middleware_appends_header () { //... $next = function ( $request ) { $this -> assertEquals ( 'Appended_header_data' , $request -> headers -> get ( 'header-name' )); return response ( 'ok' ); } $middleware -> handle ( $request , $next ); //... } \u0110\u00f4i khi middleware c\u1ea7n t\u01b0\u01a1ng t\u00e1c v\u1edbi Session, Cache ho\u1eb7c c\u00e1c components kh\u00e1c. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3, b\u1ea1n c\u1ea7n mock nh\u1eefng components n\u00e0y m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t c\u1ea7n \u0111\u1ebfn ch\u1ec9nh s\u1eeda session, b\u1ea1n n\u00ean s\u1eed d\u1ee5ng $request->getSession() \u1edf b\u00ean trong method, thay v\u00ec d\u00f9ng Facades ho\u1eb7c Dependecy Injection.","title":"Guide"},{"location":"vn/Unit/Middleware/#examples","text":"Middlewares Middleware tests","title":"Examples"},{"location":"vn/Unit/Models/","text":"Testing Models \u00b6 Models l\u00e0 m\u1ed9t trong nh\u1eefng class \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u nh\u1ea5t trong Laravel Application. C\u00f9ng v\u1edbi \u0111\u00f3, ch\u00fang l\u00e0 th\u00e0nh ph\u1ea7n ph\u1ee9c t\u1ea1p nh\u1ea5t trong s\u1ed1 c\u00e1c default components. Tu\u1ef3 v\u00e0o c\u00e1ch b\u1ea1n th\u1ef1c hi\u1ec7n, m\u00e0 models c\u00f3 th\u1ec3 bao g\u1ed3m validation, external services connection (e. g. ElasticSearch indexing), hay property getters v\u00e0 nhi\u1ec1u custom methods kh\u00e1c. Do models \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf kh\u1eafp n\u01a1i trong application, n\u00ean ch\u00fang ph\u1ea3i \u0111\u01b0\u1ee3c test m\u1ed9t c\u00e1ch c\u1ea9n th\u1eadn. Guide \u00b6 Configuration properties \u00b6 M\u1ecdi Model \u0111\u1ec1u bao g\u1ed3m m\u1ed9t v\u00e0i c\u00e1c thi\u1ebft l\u1eadp c\u01a1 b\u1ea3n v\u1edbi c\u00e1c public ho\u1eb7c protected properties. Nh\u1eefng properties n\u00e0y c\u00f3 th\u1ec3 \u1ea3nh h\u01b0\u1edfng r\u1ea5t nhi\u1ec1u \u0111\u1ebfn c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a application, tuy nhi\u00ean ch\u00fang l\u00e0 l\u00e0 nh\u1eefng th\u00e0nh ph\u1ea7n d\u1ec5 test nh\u1ea5t. B\u1ea1n c\u00f3 th\u1ec3 assert gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a property getters: public function test_contains_valid_fillable_properties () { $m = new User (); $this -> assertEquals ([ 'name' , 'email' ], $m -> getFillable ()); } Nh\u1eefng method tests sau c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh tests: $fillable -> getFillable() $guarded -> getGuarded() $table -> getTable() $primaryKey -> getKeyName() $connection -> getConnectionName() : Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n s\u1eed d\u1ee5ng multiple connections. $hidden -> getHidden() $visible -> getVisible() $casts -> getCasts() : note that method appends incrementing key. $dates -> getDates() : note that method appends [static::CREATED_AT, static::UPDATED_AT] . newCollection() : ki\u1ec3m tra collection c\u00f3 \u0111\u00fang ki\u1ec3u d\u1eef li\u1ec7u hay kh\u00f4ng. S\u1eed d\u1ee5ng assertEquals v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 t\u1eeb h\u00e0m get_class() , ch\u1ee9 kh\u00f4ng d\u00f9ng assertInstanceOf . Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1eb7t h\u1ebft t\u1ea5t c\u1ea3 nh\u1eefng ki\u1ec3m tra tr\u00ean b\u00ean trong m\u1ed9t test method, ch\u1eb3ng h\u1ea1n nh\u01b0 test_model_configuration() Relations \u00b6 Relations \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 c\u00e1c methods tr\u1ea3 v\u1ec1 class relation t\u01b0\u01a1ng \u1ee9ng. Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, relation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u1edbi custom foreign keys, ho\u1eb7c v\u1edbi nh\u1eefng c\u00e2u query th\u00eam v\u00e0o. C\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 test relation config l\u00e0 assert instance Relation \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1. Trong t\u1ea5t c\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p b\u00ecnh th\u01b0\u1eddng, c\u00e1c relations \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi $model->newQuery() nh\u01b0 l\u00e0 builder instance. N\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda g\u00ec, n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ki\u1ec3m tra m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u1edbi assertEquals public function test_user_relation () { $m = new Post (); $relation = $m -> user (); $this -> assertInstanceOf ( BelongsTo :: class , $relation ); $this -> assertEquals ( 'user_id' , $relation -> getForeignKey ()); $this -> assertEquals ( 'id' , $relation -> getOwnerKey ()); //... $this -> assertEquals ( $m -> newQuery (), $relation -> getQuery ()); } Tu\u1ef3 theo lo\u1ea1i quan h\u1ec7, m\u00e0 c\u00e1c test assertion sau c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng: getQuery() : ki\u1ec3m tra query ch\u01b0a \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda, ho\u1eb7c \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c. getForeignKey() : v\u1edbi nh\u1eefng quan h\u1ec7 HasOneOrMany ho\u1eb7c BelongsTo , nh\u01b0ng lo\u1ea1i key th\u00ec kh\u00e1c nhau (see documentaiton). getQualifiedParentKeyName() : v\u1edbi quan h\u1ec7 HasOneOrMany , do kh\u00f4ng c\u00f3 getLocalKey() method, n\u00ean method n\u00e0y c\u1ea7n \u0111\u01b0\u1ee3c ki\u1ec3m tra. getOwnerKey() : v\u1edbi quan h\u1ec7 BelongsTo v\u00e0 nh\u1eefng quan h\u1ec7 m\u1edf r\u1ed9ng t\u1eeb n\u00f3. getQualifiedForeignPivotKeyName() : v\u1edbi quan h\u1ec7 BelongsToMany . getQualifiedRelatedPivotKeyName() : v\u1edbi quan h\u1ec7 BelongsToMany . getTable() : v\u1edbi quan h\u1ec7 BelongsToMany . Kh\u00f4ng b\u1eaft bu\u1ed9c, b\u1edfi n\u00f3 \u0111\u01b0\u1ee3c bao g\u1ed3m trong nh\u1eefng method \u1edf tr\u00ean. getMorphType() : v\u1edbi quan h\u1ec7 polymorphic. Property values \u00b6 R\u1ea5t nhi\u1ec1u models c\u00f3 th\u1ec3 bao g\u1ed3m property mutators hay getters. Nh\u1eefng methods n\u00e0y th\u1ef1c hi\u1ec7n tay \u0111\u1ed5i output trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, bao g\u1ed3m c\u1ea3 k\u1ebft qu\u1ea3 t\u1eeb __get v\u00e0 toArray() . C\u1ea7n ph\u1ea3i c\u00f3 nh\u1eefng test cases th\u1ef1c hi\u1ec7n assertion tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c properties. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng unguarded helper ho\u1eb7c t\u1ef1 lo\u1ea1i b\u1ecf guards. public function test_properties_have_valid_values () { User :: unguard (); $initial = [ 'name' => 'Jonh Doe' , 'email' => 'jonh@example.com' , ]; $m = new User ( $initial ); $this -> assertEquals ( $initial , $m -> setHidden ([]), $m -> attributesToArray ()); } Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 nh\u1eefng getter, th\u00ec gi\u00e1 tr\u1ecb tr\u1ea3 ra c\u00f3 th\u1ec3 b\u1ecb thay \u0111\u1ed5i, b\u1edfi v\u1eady tests c\u1ea7n cover c\u00e1c tr\u01b0\u1eddng h\u1ee3p n\u00e0y. S\u1eed d\u1ee5ng getAttributeValue() \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng getter \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi. Sau \u0111\u00f3 g\u1ecdi \u0111\u1ebfn getter \u0111\u1ec3 test gi\u00e1 tr\u1ecb tr\u1ea3 ra l\u00e0 kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 c\u1ea3 mutators, s\u1eed d\u1ee5ng setRawAttributes \u0111\u1ec3 set gi\u00e1 tr\u1ecb ban \u0111\u1ea7u m\u00e0 kh\u00f4ng g\u1eb7p ph\u1ea3i nh\u1eefng s\u1ef1 thay \u0111\u1ed5i kh\u00f4ng l\u01b0\u1eddng tr\u01b0\u1edbc \u0111\u01b0\u1ee3c tr\u00ean gi\u00e1 tr\u1ecb \u0111\u00f3. public function test_status_getter () { $m = new User (); $m -> setRawAttributes ([ 'status' => 1 , ]); // Test if getter is working. $this -> assertEquals ( 'enabled' , $m -> getAttributeValue ( 'status' )); // Test getter logic with different values. $this -> assertEquals ( 'disabled' , $m -> getStatusAttribute ( 2 )); $this -> assertEquals ( 'pending' , $m -> getStatusAttribute ( 3 )); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> getStatusAttribute ( 4 ); } Nh\u1eefng quy t\u1eafc nh\u01b0 v\u1eady c\u0169ng \u0111\u01b0\u1ee3c apply cho Mutators. \u0110\u1ec3 tr\u00e1nh c\u00e1c getters \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n, s\u1eed d\u1ee5ng method getAttributes() cho c\u00e1c assertions. public function test_status_getter () { $m = new User (); // Test if mutator is working. $m -> setAttribute ( 'status' , 'enabled' ); $this -> assertEquals ( 1 , $m -> getAttributes ()[ 'status' ]); // Test mutator logic with different values. $this -> assertEquals ( 2 , $m -> setStatusAttribute ( 'disabled' ); $this -> assertEquals ( 3 , $m -> setStatusAttribute ( 'pending' ); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> setStatusAttribute ( 'invalid_status' ); } Events \u00b6 Model bao g\u1ed3m protected static $dispatcher property, th\u1ee9 c\u00f3 ch\u1ee9a application event handler. N\u1ebfu model c\u1ee7a b\u1ea1n s\u1eed d\u1ee5ng internal events hay observers, h\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng listeners t\u01b0\u01a1ng \u1ee9ng \u0111\u01b0\u1ee3c assign th\u00f4ng qua class dispather \u0111\u01b0\u1ee3c mock. public function test_listeners_attached () { $d = m :: mock ( \\Illuminate\\Contracts\\Events\\Dispatcher :: class ); User :: setEventDispatcher ( $d ); $name = User :: class ; // Assert that created event has been assigned. Include additional checks if needed. $d -> shouldReceive ( 'listen' ) -> once () -> with ( \"eloquent.created: { $name } \" , m :: any ()); User :: boot (); } Kh\u00f4ng s\u1eed d\u1ee5ng Dispather::hasListeners() method, b\u1edfi event c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c assign t\u1eeb b\u1ea5t k\u1ef3 \u0111\u00e2u trong application. M\u1ee5c \u0111\u00edch c\u1ee7a test n\u00e0y l\u00e0 \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng events \u0111\u01b0\u1ee3c assign t\u1eeb b\u00ean trong Model. Testing v\u1edbi observers n\u00ean tu\u00e2n theo nh\u1eefng c\u00e1ch th\u1ee9c ti\u1ebfp c\u1eadn chung gi\u1ed1ng v\u1edbi testing cho c\u00e1c class th\u00f4ng th\u01b0\u1eddng kh\u00e1c. Event handlers \u0111\u01b0\u1ee3c attach trong qu\u00e1 tr\u00ecnh boot c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua getListeners() method c\u1ee7a event dispatcher. Tuy nhi\u00ean ho\u00e0n to\u00e0n kh\u00f4ng n\u00ean s\u1eed d\u1ee5ng assignments ki\u1ec3u nh\u01b0 v\u1eady, m\u00e0 thay v\u00e0o \u0111\u00f3 n\u00ean d\u00f9ng observers. Additional checks. \u00b6 T\u1ea5t c\u1ea3 c\u00e1c method hay c\u00e1c configuration kh\u00e1c \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c test. Ch\u00fang bao g\u1ed3m (kh\u00f4ng ph\u1ea3i l\u00e0 to\u00e0n b\u1ed9): Custom model methods. S\u1eed d\u1ee5ng Traits. Custom CREATED_AT v\u00e0 UPDATED_AT keys. $with property n\u1ebfu c\u00f3. $incrementing property n\u1ebfu \u0111\u01b0\u1ee3c thay \u0111\u1ed5i so v\u1edbi m\u1eb7c \u0111\u1ecbnh. $dateFormat property n\u1ebfu \u0111\u01b0\u1ee3c thay \u0111\u1ed5i so v\u1edbi m\u1eb7c \u0111\u1ecbnh. Examples \u00b6 Example abstract model test helper Example model and test","title":"Testing Models"},{"location":"vn/Unit/Models/#testing-models","text":"Models l\u00e0 m\u1ed9t trong nh\u1eefng class \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u nh\u1ea5t trong Laravel Application. C\u00f9ng v\u1edbi \u0111\u00f3, ch\u00fang l\u00e0 th\u00e0nh ph\u1ea7n ph\u1ee9c t\u1ea1p nh\u1ea5t trong s\u1ed1 c\u00e1c default components. Tu\u1ef3 v\u00e0o c\u00e1ch b\u1ea1n th\u1ef1c hi\u1ec7n, m\u00e0 models c\u00f3 th\u1ec3 bao g\u1ed3m validation, external services connection (e. g. ElasticSearch indexing), hay property getters v\u00e0 nhi\u1ec1u custom methods kh\u00e1c. Do models \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u1edf kh\u1eafp n\u01a1i trong application, n\u00ean ch\u00fang ph\u1ea3i \u0111\u01b0\u1ee3c test m\u1ed9t c\u00e1ch c\u1ea9n th\u1eadn.","title":"Testing Models"},{"location":"vn/Unit/Models/#guide","text":"","title":"Guide"},{"location":"vn/Unit/Models/#configuration-properties","text":"M\u1ecdi Model \u0111\u1ec1u bao g\u1ed3m m\u1ed9t v\u00e0i c\u00e1c thi\u1ebft l\u1eadp c\u01a1 b\u1ea3n v\u1edbi c\u00e1c public ho\u1eb7c protected properties. Nh\u1eefng properties n\u00e0y c\u00f3 th\u1ec3 \u1ea3nh h\u01b0\u1edfng r\u1ea5t nhi\u1ec1u \u0111\u1ebfn c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a application, tuy nhi\u00ean ch\u00fang l\u00e0 l\u00e0 nh\u1eefng th\u00e0nh ph\u1ea7n d\u1ec5 test nh\u1ea5t. B\u1ea1n c\u00f3 th\u1ec3 assert gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 c\u1ee7a property getters: public function test_contains_valid_fillable_properties () { $m = new User (); $this -> assertEquals ([ 'name' , 'email' ], $m -> getFillable ()); } Nh\u1eefng method tests sau c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh tests: $fillable -> getFillable() $guarded -> getGuarded() $table -> getTable() $primaryKey -> getKeyName() $connection -> getConnectionName() : Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n s\u1eed d\u1ee5ng multiple connections. $hidden -> getHidden() $visible -> getVisible() $casts -> getCasts() : note that method appends incrementing key. $dates -> getDates() : note that method appends [static::CREATED_AT, static::UPDATED_AT] . newCollection() : ki\u1ec3m tra collection c\u00f3 \u0111\u00fang ki\u1ec3u d\u1eef li\u1ec7u hay kh\u00f4ng. S\u1eed d\u1ee5ng assertEquals v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 t\u1eeb h\u00e0m get_class() , ch\u1ee9 kh\u00f4ng d\u00f9ng assertInstanceOf . Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1eb7t h\u1ebft t\u1ea5t c\u1ea3 nh\u1eefng ki\u1ec3m tra tr\u00ean b\u00ean trong m\u1ed9t test method, ch\u1eb3ng h\u1ea1n nh\u01b0 test_model_configuration()","title":"Configuration properties"},{"location":"vn/Unit/Models/#relations","text":"Relations \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 c\u00e1c methods tr\u1ea3 v\u1ec1 class relation t\u01b0\u01a1ng \u1ee9ng. Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, relation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u1edbi custom foreign keys, ho\u1eb7c v\u1edbi nh\u1eefng c\u00e2u query th\u00eam v\u00e0o. C\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 test relation config l\u00e0 assert instance Relation \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1. Trong t\u1ea5t c\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p b\u00ecnh th\u01b0\u1eddng, c\u00e1c relations \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi $model->newQuery() nh\u01b0 l\u00e0 builder instance. N\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda g\u00ec, n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ki\u1ec3m tra m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u1edbi assertEquals public function test_user_relation () { $m = new Post (); $relation = $m -> user (); $this -> assertInstanceOf ( BelongsTo :: class , $relation ); $this -> assertEquals ( 'user_id' , $relation -> getForeignKey ()); $this -> assertEquals ( 'id' , $relation -> getOwnerKey ()); //... $this -> assertEquals ( $m -> newQuery (), $relation -> getQuery ()); } Tu\u1ef3 theo lo\u1ea1i quan h\u1ec7, m\u00e0 c\u00e1c test assertion sau c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng: getQuery() : ki\u1ec3m tra query ch\u01b0a \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda, ho\u1eb7c \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c. getForeignKey() : v\u1edbi nh\u1eefng quan h\u1ec7 HasOneOrMany ho\u1eb7c BelongsTo , nh\u01b0ng lo\u1ea1i key th\u00ec kh\u00e1c nhau (see documentaiton). getQualifiedParentKeyName() : v\u1edbi quan h\u1ec7 HasOneOrMany , do kh\u00f4ng c\u00f3 getLocalKey() method, n\u00ean method n\u00e0y c\u1ea7n \u0111\u01b0\u1ee3c ki\u1ec3m tra. getOwnerKey() : v\u1edbi quan h\u1ec7 BelongsTo v\u00e0 nh\u1eefng quan h\u1ec7 m\u1edf r\u1ed9ng t\u1eeb n\u00f3. getQualifiedForeignPivotKeyName() : v\u1edbi quan h\u1ec7 BelongsToMany . getQualifiedRelatedPivotKeyName() : v\u1edbi quan h\u1ec7 BelongsToMany . getTable() : v\u1edbi quan h\u1ec7 BelongsToMany . Kh\u00f4ng b\u1eaft bu\u1ed9c, b\u1edfi n\u00f3 \u0111\u01b0\u1ee3c bao g\u1ed3m trong nh\u1eefng method \u1edf tr\u00ean. getMorphType() : v\u1edbi quan h\u1ec7 polymorphic.","title":"Relations"},{"location":"vn/Unit/Models/#property-values","text":"R\u1ea5t nhi\u1ec1u models c\u00f3 th\u1ec3 bao g\u1ed3m property mutators hay getters. Nh\u1eefng methods n\u00e0y th\u1ef1c hi\u1ec7n tay \u0111\u1ed5i output trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, bao g\u1ed3m c\u1ea3 k\u1ebft qu\u1ea3 t\u1eeb __get v\u00e0 toArray() . C\u1ea7n ph\u1ea3i c\u00f3 nh\u1eefng test cases th\u1ef1c hi\u1ec7n assertion tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c properties. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, b\u1ea1n c\u1ea7n s\u1eed d\u1ee5ng unguarded helper ho\u1eb7c t\u1ef1 lo\u1ea1i b\u1ecf guards. public function test_properties_have_valid_values () { User :: unguard (); $initial = [ 'name' => 'Jonh Doe' , 'email' => 'jonh@example.com' , ]; $m = new User ( $initial ); $this -> assertEquals ( $initial , $m -> setHidden ([]), $m -> attributesToArray ()); } Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 nh\u1eefng getter, th\u00ec gi\u00e1 tr\u1ecb tr\u1ea3 ra c\u00f3 th\u1ec3 b\u1ecb thay \u0111\u1ed5i, b\u1edfi v\u1eady tests c\u1ea7n cover c\u00e1c tr\u01b0\u1eddng h\u1ee3p n\u00e0y. S\u1eed d\u1ee5ng getAttributeValue() \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng getter \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi. Sau \u0111\u00f3 g\u1ecdi \u0111\u1ebfn getter \u0111\u1ec3 test gi\u00e1 tr\u1ecb tr\u1ea3 ra l\u00e0 kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 c\u1ea3 mutators, s\u1eed d\u1ee5ng setRawAttributes \u0111\u1ec3 set gi\u00e1 tr\u1ecb ban \u0111\u1ea7u m\u00e0 kh\u00f4ng g\u1eb7p ph\u1ea3i nh\u1eefng s\u1ef1 thay \u0111\u1ed5i kh\u00f4ng l\u01b0\u1eddng tr\u01b0\u1edbc \u0111\u01b0\u1ee3c tr\u00ean gi\u00e1 tr\u1ecb \u0111\u00f3. public function test_status_getter () { $m = new User (); $m -> setRawAttributes ([ 'status' => 1 , ]); // Test if getter is working. $this -> assertEquals ( 'enabled' , $m -> getAttributeValue ( 'status' )); // Test getter logic with different values. $this -> assertEquals ( 'disabled' , $m -> getStatusAttribute ( 2 )); $this -> assertEquals ( 'pending' , $m -> getStatusAttribute ( 3 )); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> getStatusAttribute ( 4 ); } Nh\u1eefng quy t\u1eafc nh\u01b0 v\u1eady c\u0169ng \u0111\u01b0\u1ee3c apply cho Mutators. \u0110\u1ec3 tr\u00e1nh c\u00e1c getters \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n, s\u1eed d\u1ee5ng method getAttributes() cho c\u00e1c assertions. public function test_status_getter () { $m = new User (); // Test if mutator is working. $m -> setAttribute ( 'status' , 'enabled' ); $this -> assertEquals ( 1 , $m -> getAttributes ()[ 'status' ]); // Test mutator logic with different values. $this -> assertEquals ( 2 , $m -> setStatusAttribute ( 'disabled' ); $this -> assertEquals ( 3 , $m -> setStatusAttribute ( 'pending' ); // Abnormal case $this -> expectException ( \\InvalidArgumentException :: class ); $m -> setStatusAttribute ( 'invalid_status' ); }","title":"Property values"},{"location":"vn/Unit/Models/#events","text":"Model bao g\u1ed3m protected static $dispatcher property, th\u1ee9 c\u00f3 ch\u1ee9a application event handler. N\u1ebfu model c\u1ee7a b\u1ea1n s\u1eed d\u1ee5ng internal events hay observers, h\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng listeners t\u01b0\u01a1ng \u1ee9ng \u0111\u01b0\u1ee3c assign th\u00f4ng qua class dispather \u0111\u01b0\u1ee3c mock. public function test_listeners_attached () { $d = m :: mock ( \\Illuminate\\Contracts\\Events\\Dispatcher :: class ); User :: setEventDispatcher ( $d ); $name = User :: class ; // Assert that created event has been assigned. Include additional checks if needed. $d -> shouldReceive ( 'listen' ) -> once () -> with ( \"eloquent.created: { $name } \" , m :: any ()); User :: boot (); } Kh\u00f4ng s\u1eed d\u1ee5ng Dispather::hasListeners() method, b\u1edfi event c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c assign t\u1eeb b\u1ea5t k\u1ef3 \u0111\u00e2u trong application. M\u1ee5c \u0111\u00edch c\u1ee7a test n\u00e0y l\u00e0 \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng events \u0111\u01b0\u1ee3c assign t\u1eeb b\u00ean trong Model. Testing v\u1edbi observers n\u00ean tu\u00e2n theo nh\u1eefng c\u00e1ch th\u1ee9c ti\u1ebfp c\u1eadn chung gi\u1ed1ng v\u1edbi testing cho c\u00e1c class th\u00f4ng th\u01b0\u1eddng kh\u00e1c. Event handlers \u0111\u01b0\u1ee3c attach trong qu\u00e1 tr\u00ecnh boot c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy c\u1eadp th\u00f4ng qua getListeners() method c\u1ee7a event dispatcher. Tuy nhi\u00ean ho\u00e0n to\u00e0n kh\u00f4ng n\u00ean s\u1eed d\u1ee5ng assignments ki\u1ec3u nh\u01b0 v\u1eady, m\u00e0 thay v\u00e0o \u0111\u00f3 n\u00ean d\u00f9ng observers.","title":"Events"},{"location":"vn/Unit/Models/#additional-checks","text":"T\u1ea5t c\u1ea3 c\u00e1c method hay c\u00e1c configuration kh\u00e1c \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c test. Ch\u00fang bao g\u1ed3m (kh\u00f4ng ph\u1ea3i l\u00e0 to\u00e0n b\u1ed9): Custom model methods. S\u1eed d\u1ee5ng Traits. Custom CREATED_AT v\u00e0 UPDATED_AT keys. $with property n\u1ebfu c\u00f3. $incrementing property n\u1ebfu \u0111\u01b0\u1ee3c thay \u0111\u1ed5i so v\u1edbi m\u1eb7c \u0111\u1ecbnh. $dateFormat property n\u1ebfu \u0111\u01b0\u1ee3c thay \u0111\u1ed5i so v\u1edbi m\u1eb7c \u0111\u1ecbnh.","title":"Additional checks."},{"location":"vn/Unit/Models/#examples","text":"Example abstract model test helper Example model and test","title":"Examples"},{"location":"vn/Unit/Transformers/","text":"Testing Transformers and Presenters \u00b6 H\u1ea7u h\u1ebft c\u00e1c project \u0111\u1ec1u bao g\u1ed3m serializations v\u00e0 presenters, theo c\u00e1ch n\u00e0y hay c\u00e1ch kh\u00e1c. C\u00e1ch th\u1ee9c m\u1eb7c \u0111\u1ecbnh m\u00e0 Laravel cung c\u1ea5p \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng mutators/getters trong Model class, tuy nhi\u00ean trong nh\u1eefng application ph\u1ee9c t\u1ea1p, ta n\u00ean s\u1eed d\u1ee5ng nh\u1eefng c\u00e1ch kh\u00e1c. H\u01b0\u1edbng d\u1eabn d\u01b0\u1edbi \u0111\u00e2y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p chung d\u00f9ng transformers hay presenters. Guide \u00b6 S\u1eed d\u1ee5ng transformers m\u1ed9t c\u00e1ch th\u00edch \u0111\u00e1ng l\u00e0 r\u1ea5t c\u1ea7n thi\u1ebft cho nh\u1eefng application cung c\u1ea5p API, v\u00e0 c\u0169ng r\u1ea5t khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng trong nh\u1eefng application kh\u00e1c n\u1eefa. Transformer test ph\u1ea3i tu\u00e2n th\u1ee7 c\u00e1c m\u1ee5c ti\u00eau sau: \u0110\u1ea3m b\u1ea3o t\u00ednh nh\u1ea5t qu\u00e1n c\u1ee7a d\u1eef li\u1ec7u (object structure must not change between commit unexpected). \u0110\u1ea3m b\u1ea3o proterty mutations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u00ednh x\u00e1c. \u0110\u1ea3m b\u1ea3o ki\u1ec3u data kh\u1edbp v\u1edbi \u0111\u1ea7u ra mong mu\u1ed1n. Trong r\u1ea5t nhi\u1ec1u c\u00e1c API client applications, vi\u1ec7c xu\u1ea5t hi\u1ec7n properties m\u1edbi, hay m\u1ea5t m\u1ed9t v\u00e0i properties c\u00f3 th\u1ec3 s\u1ebd d\u1eabn \u0111\u1ebfn h\u1eadu qu\u1ea3 nghi\u00eam tr\u1ecdng. Do \u0111\u00f3 m\u1ecdi thay \u0111\u1ed5i \u0111\u1ebfn c\u1ea5u tr\u00fac object ph\u1ea3i lu\u00f4n \u0111\u01b0\u1ee3c ki\u1ec3m so\u00e1t. H\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng transformers c\u1ee7a b\u1ea1n lu\u00f4n c\u00f3 d\u1eef li\u1ec7u nh\u1ea5t qu\u00e1n. public function test_output_contains_valid_structure () { $u = new User ([ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'password' => '123456' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) $u -> setRelation ( 'posts' , [ new Post ([ 'title' => 'Test post' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertEquals ([ 'name' , 'email' , 'created_at' , 'updated_at' , 'posts' ], array_keys ( $t )); $this -> assertTrue ( is_array ( $t [ 'posts' ])); // Additional checks. } N\u1ebfu application c\u1ee7a b\u1ea1n c\u00f3 implement Feature Test cho API, b\u1ea1n c\u00f3 th\u1ec3 thay vi\u1ec7c check n\u00e0y b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng method assertJsonStructure b\u00ean trong Feature test case. V\u1edbi JSON output, c\u1ea7n ph\u1ea3i check data type, \u0111\u1eb7c bi\u1ec7t n\u1ebfu API Clients c\u1ee7a b\u1ea1n \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng nh\u1eefng ng\u00f4n ng\u1eef d\u00f9ng strict-type. public function test_data_types () { $u = new User ([ 'id' => '1' , 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'created_at' => Carbon :: now (), ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertInternalType ( 'int' , $t [ 'id' ]); $this -> assertInternalType ( 'string' , $t [ 'name' ]); $this -> assertInternalType ( 'string' , $t [ 'email' ]); $this -> assertInternalType ( 'array' , $t [ 'created_at' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'date' ]); $this -> assertInternalType ( 'int' , $t [ 'created_at' ][ 'timezone_type' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'timezone' ]); }","title":"Testing Transformers and Presenters"},{"location":"vn/Unit/Transformers/#testing-transformers-and-presenters","text":"H\u1ea7u h\u1ebft c\u00e1c project \u0111\u1ec1u bao g\u1ed3m serializations v\u00e0 presenters, theo c\u00e1ch n\u00e0y hay c\u00e1ch kh\u00e1c. C\u00e1ch th\u1ee9c m\u1eb7c \u0111\u1ecbnh m\u00e0 Laravel cung c\u1ea5p \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng mutators/getters trong Model class, tuy nhi\u00ean trong nh\u1eefng application ph\u1ee9c t\u1ea1p, ta n\u00ean s\u1eed d\u1ee5ng nh\u1eefng c\u00e1ch kh\u00e1c. H\u01b0\u1edbng d\u1eabn d\u01b0\u1edbi \u0111\u00e2y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p chung d\u00f9ng transformers hay presenters.","title":"Testing Transformers and Presenters"},{"location":"vn/Unit/Transformers/#guide","text":"S\u1eed d\u1ee5ng transformers m\u1ed9t c\u00e1ch th\u00edch \u0111\u00e1ng l\u00e0 r\u1ea5t c\u1ea7n thi\u1ebft cho nh\u1eefng application cung c\u1ea5p API, v\u00e0 c\u0169ng r\u1ea5t khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng trong nh\u1eefng application kh\u00e1c n\u1eefa. Transformer test ph\u1ea3i tu\u00e2n th\u1ee7 c\u00e1c m\u1ee5c ti\u00eau sau: \u0110\u1ea3m b\u1ea3o t\u00ednh nh\u1ea5t qu\u00e1n c\u1ee7a d\u1eef li\u1ec7u (object structure must not change between commit unexpected). \u0110\u1ea3m b\u1ea3o proterty mutations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u00ednh x\u00e1c. \u0110\u1ea3m b\u1ea3o ki\u1ec3u data kh\u1edbp v\u1edbi \u0111\u1ea7u ra mong mu\u1ed1n. Trong r\u1ea5t nhi\u1ec1u c\u00e1c API client applications, vi\u1ec7c xu\u1ea5t hi\u1ec7n properties m\u1edbi, hay m\u1ea5t m\u1ed9t v\u00e0i properties c\u00f3 th\u1ec3 s\u1ebd d\u1eabn \u0111\u1ebfn h\u1eadu qu\u1ea3 nghi\u00eam tr\u1ecdng. Do \u0111\u00f3 m\u1ecdi thay \u0111\u1ed5i \u0111\u1ebfn c\u1ea5u tr\u00fac object ph\u1ea3i lu\u00f4n \u0111\u01b0\u1ee3c ki\u1ec3m so\u00e1t. H\u00e3y ch\u1eafc ch\u1eafn r\u1eb1ng transformers c\u1ee7a b\u1ea1n lu\u00f4n c\u00f3 d\u1eef li\u1ec7u nh\u1ea5t qu\u00e1n. public function test_output_contains_valid_structure () { $u = new User ([ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'password' => '123456' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) $u -> setRelation ( 'posts' , [ new Post ([ 'title' => 'Test post' , 'created_at' => Carbon :: now (), 'updated_at' => Carbon :: now (), ]) ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertEquals ([ 'name' , 'email' , 'created_at' , 'updated_at' , 'posts' ], array_keys ( $t )); $this -> assertTrue ( is_array ( $t [ 'posts' ])); // Additional checks. } N\u1ebfu application c\u1ee7a b\u1ea1n c\u00f3 implement Feature Test cho API, b\u1ea1n c\u00f3 th\u1ec3 thay vi\u1ec7c check n\u00e0y b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng method assertJsonStructure b\u00ean trong Feature test case. V\u1edbi JSON output, c\u1ea7n ph\u1ea3i check data type, \u0111\u1eb7c bi\u1ec7t n\u1ebfu API Clients c\u1ee7a b\u1ea1n \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng nh\u1eefng ng\u00f4n ng\u1eef d\u00f9ng strict-type. public function test_data_types () { $u = new User ([ 'id' => '1' , 'name' => 'Jonh' , 'email' => 'jonh@example.com' , 'created_at' => Carbon :: now (), ]) $t = ( new UserTransformer ()) -> transform ( $user ); $this -> assertInternalType ( 'int' , $t [ 'id' ]); $this -> assertInternalType ( 'string' , $t [ 'name' ]); $this -> assertInternalType ( 'string' , $t [ 'email' ]); $this -> assertInternalType ( 'array' , $t [ 'created_at' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'date' ]); $this -> assertInternalType ( 'int' , $t [ 'created_at' ][ 'timezone_type' ]); $this -> assertInternalType ( 'string' , $t [ 'created_at' ][ 'timezone' ]); }","title":"Guide"},{"location":"vn/Unit/Validation/","text":"Testing Validation Rules. \u00b6 C\u00f3 2 c\u00e1ch th\u1ef1c hi\u1ec7n vi\u1ec7c test v\u1edbi Validation Rules: Ki\u1ec3m tra xem nh\u1eefng rules c\u1ea7n thi\u1ebft \u0111\u00e3 \u0111\u01b0\u1ee3c set hay ch\u01b0a Ki\u1ec3m tra nh\u01b0ng data kh\u00f4ng h\u1ee3p l\u1ec7 th\u00ec kh\u00f4ng th\u1ec3 pass qua \u0111\u01b0\u1ee3c validation Tr\u01b0\u1eddng h\u1ee3p tr\u01b0\u1edbc th\u00ec r\u1ea5t l\u00e0 \u0111\u01a1n gi\u1ea3n, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u nh\u1eefng test cases ph\u1ee9c t\u1ea1p, tr\u01b0\u1eddng h\u1ee3p sau th\u00ec l\u1ea1i c\u1ea7n r\u1ea5t nhi\u1ec1u data \u0111\u1ec3 test. Nh\u1eefng test cases m\u1edbi n\u00ean \u0111\u01b0\u1ee3c b\u1ed5 sung li\u00ean t\u1ee5c m\u1ed7i khi c\u00f3 s\u1ef1 xu\u1ea5t hi\u1ec7n c\u1ee7a d\u1eef li\u1ec7u kh\u00f4ng h\u1ee3p l\u1ec7 ph\u00e1t sinh trong qu\u00e1 tr\u00ecnh user testing ho\u1eb7c s\u1eed d\u1ee5ng tr\u00ean production. Guide \u00b6 Testing validation rules \u00b6 Validation rules \u0111\u01b0\u1ee3c set qua 2 c\u00e1ch th\u00f4ng th\u01b0\u1eddng: \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong app logic (th\u00f4ng qua h\u00e0m validate() c\u1ee7a controller, hay Validator facade ...) ho\u1eb7c qua Form Requests. Tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\u00ean c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c test th\u00f4ng qua mocking validator instance, v\u00e0 ch\u1ea1y test trong nh\u1eefng class bao g\u1ed3m logic. public function test_store_method () { $c = new Controller (); $v = m :: mock ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); // Substitute Validator instance in DI container. $previous = $this -> app -> make ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); $this -> app -> bind ( \\Illuminate\\Contracts\\Validation\\Factory :: class , $v ); $r = new Request (); $request -> headers -> set ( 'content-type' , 'application/json' ); $data = [ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , ]; $request -> setJson ( new ParameterBag ( $data )); $v -> expects ( 'make' ) -> once () -> with ( $data , [ 'name' => 'required' , 'email' => 'required|email' , ], m :: any (), m :: any ()) -> andReturnUsing ( function ( ... $args ) { return $previous -> make ( ... $args ); }); $c -> store ( $request ); // Additional assertions. } Trong tr\u01b0\u1eddng h\u1ee3p d\u00f9ng Form Requests, m\u1ecdi th\u1ee9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh d\u1ec5 d\u00e0ng h\u01a1n: public function test_it_contains_valid_rules () { $r = new StoreRequest (); $this -> assertEquals ([ 'name' => 'required' , 'email' => 'required|email' , ], $r -> rules ()); } Testing abnormal data \u00b6 Vi\u1ec7c \u0111o\u00e1n tr\u01b0\u1edbc to\u00e0n b\u1ed9 c\u00e1c abnormal data l\u00e0 ho\u00e0n to\u00e0n kh\u00f4ng th\u1ec3, tuy nhi\u00ean, m\u1ed7i khi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p nh\u01b0 th\u1ebf xu\u1ea5t hi\u1ec7n, c\u1ea7n ph\u1ea3i b\u1ed5 sung th\u00eam nh\u1eefng test case m\u1edbi. Abnormal data \u0111\u01b0\u1ee3c ph\u00e1t hi\u1ec7n trong qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng application. Th\u00eam v\u00e0o nh\u1eefng test case cho controller hay c\u00e1c instance kh\u00e1c v\u1edbi abnormal data \u0111\u1ec3 m\u00f4 ph\u1ecfng l\u1ed7i. Th\u00eam v\u00e0o b\u1ea3n fix v\u00e0 test case v\u1edbi nh\u1eefng l\u1ed7i \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n t\u1eeb tr\u01b0\u1edbc. Testing custom validation rules \u00b6 N\u1ebfu trong application c\u1ee7a b\u1ea1n c\u00f3 nh\u1eefng custom validations, b\u1ea1n c\u1ea7n ph\u1ea3i th\u00eam v\u00e0o nh\u1eefng test cases cho c\u00e1c rules \u0111\u00f3. Nh\u1eefng tests n\u00e0y kh\u00f4ng y\u00eau c\u1ea7u ki\u1ec3m tra user input, m\u00e0 c\u1ea7n ph\u1ea3i ki\u1ec3m tra validation logic \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng n\u00f3 fails ho\u1eb7c passes trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u01b0\u1ee3c d\u1ef1 b\u00e1o tr\u01b0\u1edbc. Th\u1eadt kh\u00f4ng may l\u00e0 kh\u00f4ng c\u00f3 m\u1ed9t method n\u00e0o \u0111\u1ec3 extract extensions t\u1eeb validation factory, b\u1edfi th\u1ebf c\u1ea7n ph\u1ea3i \u0111\u1ecdc ra protected property. // AppServiceProvider::boot Validator :: extend ( 'foo' , function ( $attribute , $value , $parameters , $validator ) { return $value == 'foo' ; }); // AppServiceProviderTest public function test_validator_foo_rule () { // Extract extensions from validation factory. $v = $this -> app [ 'validator' ]; $r = new ReflectionClass ( $v ); $p = $r -> getProperty ( 'extensions' ); $p -> setAccessible ( true ); $extensions = $p -> getValue ( $v ); // Check if extension had been registered properly. $this -> assertArrayHasKey ( 'foo' , $extensions ); $rule = $extensions [ 'foo' ]; // Test cases for extension. $this -> assertTrue ( $rule ( 'attr' , 'foo' )); $this -> assertFalse ( $rule ( 'attr' , 'bar' )); } Class-based rules (Laravel 5.5) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c test m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n, gi\u1ed1ng nh\u1eefng class b\u00ecnh th\u01b0\u1eddng kh\u00e1c v\u1edbi nh\u1eefng rules c\u01a1 b\u1ea3n cho code coverage.","title":"Testing Validation Rules."},{"location":"vn/Unit/Validation/#testing-validation-rules","text":"C\u00f3 2 c\u00e1ch th\u1ef1c hi\u1ec7n vi\u1ec7c test v\u1edbi Validation Rules: Ki\u1ec3m tra xem nh\u1eefng rules c\u1ea7n thi\u1ebft \u0111\u00e3 \u0111\u01b0\u1ee3c set hay ch\u01b0a Ki\u1ec3m tra nh\u01b0ng data kh\u00f4ng h\u1ee3p l\u1ec7 th\u00ec kh\u00f4ng th\u1ec3 pass qua \u0111\u01b0\u1ee3c validation Tr\u01b0\u1eddng h\u1ee3p tr\u01b0\u1edbc th\u00ec r\u1ea5t l\u00e0 \u0111\u01a1n gi\u1ea3n, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u nh\u1eefng test cases ph\u1ee9c t\u1ea1p, tr\u01b0\u1eddng h\u1ee3p sau th\u00ec l\u1ea1i c\u1ea7n r\u1ea5t nhi\u1ec1u data \u0111\u1ec3 test. Nh\u1eefng test cases m\u1edbi n\u00ean \u0111\u01b0\u1ee3c b\u1ed5 sung li\u00ean t\u1ee5c m\u1ed7i khi c\u00f3 s\u1ef1 xu\u1ea5t hi\u1ec7n c\u1ee7a d\u1eef li\u1ec7u kh\u00f4ng h\u1ee3p l\u1ec7 ph\u00e1t sinh trong qu\u00e1 tr\u00ecnh user testing ho\u1eb7c s\u1eed d\u1ee5ng tr\u00ean production.","title":"Testing Validation Rules."},{"location":"vn/Unit/Validation/#guide","text":"","title":"Guide"},{"location":"vn/Unit/Validation/#testing-validation-rules_1","text":"Validation rules \u0111\u01b0\u1ee3c set qua 2 c\u00e1ch th\u00f4ng th\u01b0\u1eddng: \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong app logic (th\u00f4ng qua h\u00e0m validate() c\u1ee7a controller, hay Validator facade ...) ho\u1eb7c qua Form Requests. Tr\u01b0\u1eddng h\u1ee3p \u0111\u1ea7u ti\u00ean c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c test th\u00f4ng qua mocking validator instance, v\u00e0 ch\u1ea1y test trong nh\u1eefng class bao g\u1ed3m logic. public function test_store_method () { $c = new Controller (); $v = m :: mock ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); // Substitute Validator instance in DI container. $previous = $this -> app -> make ( \\Illuminate\\Contracts\\Validation\\Factory :: class ); $this -> app -> bind ( \\Illuminate\\Contracts\\Validation\\Factory :: class , $v ); $r = new Request (); $request -> headers -> set ( 'content-type' , 'application/json' ); $data = [ 'name' => 'Jonh' , 'email' => 'jonh@example.com' , ]; $request -> setJson ( new ParameterBag ( $data )); $v -> expects ( 'make' ) -> once () -> with ( $data , [ 'name' => 'required' , 'email' => 'required|email' , ], m :: any (), m :: any ()) -> andReturnUsing ( function ( ... $args ) { return $previous -> make ( ... $args ); }); $c -> store ( $request ); // Additional assertions. } Trong tr\u01b0\u1eddng h\u1ee3p d\u00f9ng Form Requests, m\u1ecdi th\u1ee9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh d\u1ec5 d\u00e0ng h\u01a1n: public function test_it_contains_valid_rules () { $r = new StoreRequest (); $this -> assertEquals ([ 'name' => 'required' , 'email' => 'required|email' , ], $r -> rules ()); }","title":"Testing validation rules"},{"location":"vn/Unit/Validation/#testing-abnormal-data","text":"Vi\u1ec7c \u0111o\u00e1n tr\u01b0\u1edbc to\u00e0n b\u1ed9 c\u00e1c abnormal data l\u00e0 ho\u00e0n to\u00e0n kh\u00f4ng th\u1ec3, tuy nhi\u00ean, m\u1ed7i khi nh\u1eefng tr\u01b0\u1eddng h\u1ee3p nh\u01b0 th\u1ebf xu\u1ea5t hi\u1ec7n, c\u1ea7n ph\u1ea3i b\u1ed5 sung th\u00eam nh\u1eefng test case m\u1edbi. Abnormal data \u0111\u01b0\u1ee3c ph\u00e1t hi\u1ec7n trong qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng application. Th\u00eam v\u00e0o nh\u1eefng test case cho controller hay c\u00e1c instance kh\u00e1c v\u1edbi abnormal data \u0111\u1ec3 m\u00f4 ph\u1ecfng l\u1ed7i. Th\u00eam v\u00e0o b\u1ea3n fix v\u00e0 test case v\u1edbi nh\u1eefng l\u1ed7i \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n t\u1eeb tr\u01b0\u1edbc.","title":"Testing abnormal data"},{"location":"vn/Unit/Validation/#testing-custom-validation-rules","text":"N\u1ebfu trong application c\u1ee7a b\u1ea1n c\u00f3 nh\u1eefng custom validations, b\u1ea1n c\u1ea7n ph\u1ea3i th\u00eam v\u00e0o nh\u1eefng test cases cho c\u00e1c rules \u0111\u00f3. Nh\u1eefng tests n\u00e0y kh\u00f4ng y\u00eau c\u1ea7u ki\u1ec3m tra user input, m\u00e0 c\u1ea7n ph\u1ea3i ki\u1ec3m tra validation logic \u0111\u1ec3 ch\u1eafc ch\u1eafn r\u1eb1ng n\u00f3 fails ho\u1eb7c passes trong nh\u1eefng tr\u01b0\u1eddng h\u1ee3p \u0111\u01b0\u1ee3c d\u1ef1 b\u00e1o tr\u01b0\u1edbc. Th\u1eadt kh\u00f4ng may l\u00e0 kh\u00f4ng c\u00f3 m\u1ed9t method n\u00e0o \u0111\u1ec3 extract extensions t\u1eeb validation factory, b\u1edfi th\u1ebf c\u1ea7n ph\u1ea3i \u0111\u1ecdc ra protected property. // AppServiceProvider::boot Validator :: extend ( 'foo' , function ( $attribute , $value , $parameters , $validator ) { return $value == 'foo' ; }); // AppServiceProviderTest public function test_validator_foo_rule () { // Extract extensions from validation factory. $v = $this -> app [ 'validator' ]; $r = new ReflectionClass ( $v ); $p = $r -> getProperty ( 'extensions' ); $p -> setAccessible ( true ); $extensions = $p -> getValue ( $v ); // Check if extension had been registered properly. $this -> assertArrayHasKey ( 'foo' , $extensions ); $rule = $extensions [ 'foo' ]; // Test cases for extension. $this -> assertTrue ( $rule ( 'attr' , 'foo' )); $this -> assertFalse ( $rule ( 'attr' , 'bar' )); } Class-based rules (Laravel 5.5) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c test m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n, gi\u1ed1ng nh\u1eefng class b\u00ecnh th\u01b0\u1eddng kh\u00e1c v\u1edbi nh\u1eefng rules c\u01a1 b\u1ea3n cho code coverage.","title":"Testing custom validation rules"}]}